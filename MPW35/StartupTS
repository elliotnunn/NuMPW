#	StartupTS - ToolServer Startup File##	Copyright Apple Computer, Inc. 1990-1998#	All Rights Reserved.# 	{BackgroundShell} - true for ToolServer			Export BackgroundShell#	{Boot} - The boot disk.  (Predefined.)			Export Boot#	{SystemFolder} - The directory that contains System & Finder.  (Predefined.)			Export SystemFolder#	{ShellDirectory} - The directory that contains ToolServer.  (Predefined.)			Export ShellDirectory#	{Active} - The active (topmost) window.  (Predefined.)			Export Active#	{Target} - The target (previously active) window.  (Predefined.)			Export Target#	{Worksheet} - The name of the Worksheet window.  (Predefined.)			Export Worksheet#	{Status} - The result of the last command executed.  (Predefined.)			Export Status#	{User} - Automatically defined to the name that appears in the Chooser.			Export User#	{MPW} - The volume or folder containing the Macintosh Programmer's Workshop.#			If you put Toolserver outside the MPW folder (say on the desktop), #			you should redefine this variable to the location of the MPW folder.			Set MPW "{ShellDirectory}"			Export MPW			#	{MPWVersion} - Version of MPW			Export MPWVersion#	{ExtendWordSet}		Export ExtendWordSet		#	{InhibitMarkCopy}		Export InhibitMarkCopy		#	{NewKeyboardLayout}#		Export NewKeyboardLayout		#	{ScreenUpdateDelay}		Export ScreenUpdateDelay		#	{ToolSleepTime}		Export ToolSleepTime#	{Commands} - Directories to search for commands.  As of ETO 20 we have introduced#					the concept of a user commands directory where you put your#					personal commands.  We've also merged the tools and scripts#					directories into a single directory called "Commands"			Set Commands ":"			If "`Exists -q "{MPW}User Commands:"`" 				Set Commands "{Commands}","{MPW}User Commands:"			End			If "`Exists -q "{MPW}Commands:"`" 				Set Commands "{Commands}","{MPW}Commands:"			End			If "`Exists -q "{MPW}Tools:"`" 				Set Commands "{Commands}","{MPW}Tools:"			End			If "`Exists -q "{MPW}Scripts:"`" 				Set Commands "{Commands}","{MPW}Scripts:"			End			Export Commands			# 	{PrefsFolder} - Directory to search for userstartupTS and quitTS scripts. (Predefined.)#					Toolserver looks in the {PrefsFolder} and then the {MPW} #					folder for startup and quit scripts.  {PrefsFolder} defaults to#					{SystemFolder}Preferences:MPW.  You may change this here, #					or create an alias named MPW in the preferences folder to #					reference the folder where you keep your scripts.			Export PrefsFolder			#	{TempFolder}  - Directory for temporary items.   (Predefined.)#					Toolserver may create some temporary items here.#					Defaults to {PrefsFolder}TempTS.			Export TempFolder			#	{SysTempFolder}  - Directory for temporary items.   (Predefined.)#					ToolServer may create some temporary items here.#					Defaults to "{Boot}Temporary Items".			Export SysTempFolder		#	As of ETO 20 we are moving towards having interfaces and#	libraries optionally outside the MPW folder.#	The new behavior is to first look up one level from#	the mpw directory for the interfaces and libraries	If "`Exists -q "{MPW}:Interfaces&Libraries:"`" 		Set InterfacesandLibrariesLocation "{MPW}:Interfaces&Libraries:"	Else		Set InterfacesandLibrariesLocation "{MPW}"	End#	{AIncludes} - Directories to search for assembly language include files.						Set AIncludes "{InterfacesandLibrariesLocation}Interfaces:AIncludes:"			Export AIncludes			#	{Libraries} - Directory that contains shared libraries. 					Set Libraries "{InterfacesandLibrariesLocation}Libraries:Libraries:"			Export Libraries			#	{CIncludes} - Directories to search for C include files.			Set CIncludes "{InterfacesandLibrariesLocation}Interfaces:CIncludes:"			Export CIncludes#	{CLibraries} - Directory that contains C libraries. 					Set CLibraries "{InterfacesandLibrariesLocation}Libraries:CLibraries:"			Export CLibraries						if not "`Exists -q "{InterfacesandLibrariesLocation}Libraries:CLibraries:"`"				Set CLibraries "You have not installed the CLibraries for 68K development."			end						#	{SCIncludes} - Directories to search for C include files.			Set SCIncludes "{InterfacesandLibrariesLocation}Interfaces:CIncludes:"			Export SCIncludes#	{PPCCIncludes} - Directories to search for PowerPC include files.			Set PPCCIncludes "{InterfacesandLibrariesLocation}Interfaces:CIncludes:"			Export PPCCIncludes#	{PPCLibraries} - Directory that contains PowerPC libraries. 			Set PPCLibraries "{InterfacesandLibrariesLocation}"Libraries:PPCLibraries:			Export PPCLibraries						if not "`Exists -q "{InterfacesandLibrariesLocation}Libraries:PPCLibraries:"`"				Set PPCLibraries "You have not installed the CLibraries for PowerPC development."			end#	{PInterfaces} - Directories to search for Pascal interface files.			Set PInterfaces "{InterfacesandLibrariesLocation}Interfaces:PInterfaces:"			Export PInterfaces#	{PLibraries} - Directory that contains Pascal libraries.					Set PLibraries "{InterfacesandLibrariesLocation}Libraries:PLibraries:"			Export PLibraries						if not "`Exists -q "{InterfacesandLibrariesLocation}Libraries:PLibraries:"`"				Set PLibraries "You have not installed the Libraries for Pascal development."			end#	{RIncludes} - Directory that contains Rez include files.			Set RIncludes "{InterfacesandLibrariesLocation}Interfaces:RIncludes:"			Export RIncludes#	{CFM68KLibraries} - Directory that contains CFM-68K static link libraries. 					Set CFM68KLibraries "{InterfacesandLibrariesLocation}Libraries:CFM68KLibraries:"			Export CFM68KLibraries			if not "`Exists -q "{InterfacesandLibrariesLocation}Libraries:CFM68KLibraries:"`"				Set CFM68KLibraries "You have not installed the Libraries for CFM 68K development."			end			#	{SharedLibraries} - Directory that contains "fat" PEF-format import libraries. 					Set SharedLibraries "{InterfacesandLibrariesLocation}Libraries:SharedLibraries:"			Export SharedLibraries						Unset InterfacesandLibrariesLocation#	{CaseSensitive} - If non-zero, pattern matching is case sensitive.			Set CaseSensitive 0			Export CaseSensitive#	{SearchBackward} - If non-zero, search will go backwards.			Set SearchBackward 0			Export SearchBackward#	{SearchWrap} - If non-zero, search will wrap.			Set SearchWrap 0			Export SearchWrap#	{SearchType} - Specifies the default searching type.  (0/literal,#		1/word, 2/regular expression)			Set SearchType 0			Export SearchType#	{Tab} - Default tab setting for new windows.			Set Tab 4			Export Tab#	{Font} - Default Font for new windows.			Set Font MPW			Export Font#	{FontSize} - Default font size for new windows.			Set FontSize 9			Export FontSize#	{AutoIndent} - If non-zero, auto indentation will be the default for#		new windows.			Set AutoIndent 1			Export AutoIndent#	{WordSet} - Character set that defines words for searches and double-clicks.			Set WordSet 'a-zA-Z_0-9'			Export WordSet#	{PrintOptions} - Options used by the Print Window and Print Selection menus.			Set PrintOptions '-h'			Export PrintOptions			#	{Exit} - If non-zero, command files terminate after the first error.			Set Exit 1			Export Exit#	{Echo} - If non-zero, commands are echoed before execution.			Set Echo 0			Export Echo#	{Test} - If non-zero, tools and applications are not executed.			Set Test 0			Export Test#	Commando Support 			Export Windows 			Export Aliases 			Set Commando Commando			Export Commando#	Aliases			Alias File Target#	Clean up temporary files that are left over from a previous run.			(Delete -i -y "{MPW}"MPW.MinPipe-Å || Set Status 0) ·dev:null		#	The file UserStartupTS can be used to override definitions made in StartupTS,#	or to define additional variables, exports, and aliases.  The file should be#	located in the directory containing Toolserver, or in your preferences # 	folder.#			If "{PrefsFolder}" && "`Exists -q "{PrefsFolder}UserStartupTS"`"#				Execute "{PrefsFolder}UserStartupTS"#			Else#				if "`Exists -q "{ShellDirectory}UserStartupTS"`"#					Execute "{ShellDirectory}UserStartupTS"#				End#				#			End#	Since UserStartup is distributed with MPW, you may want to have other#	startup files that will not be overwritten with a new release.#	Other personalized startup files may be named UserStartupTS¥Å - such as #	"UserStartupTS¥John" or "UserStartupTS¥Tom"  (¥ is option-8), and placed#	in the preferences folder ({PrefsFolder}).  Alternately, you can#	place additional startup items in the "TS Startup Items" folder located#	in the directory containing ToolServer.  The items in the#	"TS Startup Items" folder do not have any special naming conventions, and#	will be executed in alphabetical order.  They can also be any type of#	executable entity, such as scripts, tools, and/or applications.##	The following executes such files found in either place.			If "{PrefsFolder}"				For __Startup__i in `(Files -t 'TEXT' -f -s "{PrefsFolder}"UserStartupTS¥Å || Set Status 0) ³ dev:null`					Execute "{__Startup__i}"				End			End			For __Startup__i in `(Files -t 'TEXT' -f -s "{ShellDirectory}TS Startup Items:" || Set Status 0; Files -t 'APPL' -f -s "{ShellDirectory}TS Startup Items:" || Set Status 0 ; Files -t 'MPST' -f -s "{ShellDirectory}TS Startup Items:" || Set Status 0) ³ dev:null`				Execute "{__Startup__i}"			End			# this method of running custom startup scripts is obsolete, and will be removed			# in a future version of this script.  Please move your UserStartupTS¥ scripts into			# the new :TS Startup Items: folder.			For __Startup__i in `(Files -t 'TEXT' -f -s "{ShellDirectory}"UserStartupTS¥Å || Set Status 0) ³ dev:null`				Execute "{__Startup__i}"			End			Unset __Startup__i