    bra     Main


PrintStrFunc
    tst.l   $316
    beq     PrintStrFallback

    move    sr,-(sp)
    movem.l a0-a4/d0-d7,-(sp)

    move.l  58(sp),a1 ; argument

    move.l  $316.w,a0
    move.l  4(a0),a0
    move.l  $1c(a0),a0 ; io table
    lea     20(a0),a0 ; point to stdout entry
    clr.l   12(a0)
    move.b  (a1)+,12+3(a0) ; length
    move.l  a1,16(a0) ; buffer
    move.l  a0,-(sp)
    move.l  4(a0),a0 ; now point to fsys table
    move.l  16(a0),a0 ; ftrap-table ptr for write
    moveq   #-1,d0
    jsr     (a0)
    addq    #4,sp

    movem.l (sp)+,a0-a4/d0-d7
    move    (sp)+,sr
    move.l  (sp)+,(sp)
    rts

PrintStrFallback
    dc.w    $AFFF ; debugstr

; Push a pascal string to the stack
    macro   PushStr
    bra     .Skip\@
.StrStart\@
    dc.b    .StrEnd\@-.StrStart\@-1
    dc.b    \1
.StrEnd\@
    even
.Skip\@
    pea     .StrStart\@
    endm

; Same, but with a CR after the string
    macro   PushStrLine
    bra     .Skip\@
.StrStart\@
    dc.b    .StrEnd\@-.StrStart\@-1
    dc.b    \1, 13
.StrEnd\@
    even
.Skip\@
    pea     .StrStart\@
    endm

; Alternative to bra.l on 68000
    macro   bsrLong
.base\@
    pea     .return\@
    pea     .base\@
    add.l   #\1-.base\@,(sp)
    rts
.return\@
    endm

; Invoke before each test, with the test name as an argument
    rsreset
    macro   StartOfTest
    rs.b    1 ; increment __RS
    bra     .Skip\@
.StrStart\@
    dc.b    .StrEnd\@-.StrStart\@-1
    dc.b    'ok \<__RS> - ', \1, 13
.StrEnd\@
    even
.Skip\@
    pea     .StrStart\@
    move.l  (sp)+,-$7ffc(a5)
    clr.b   -$8000(a5) ; "all is well"
    endm

; Invoke after each test, to print the test name with 'ok' or 'not ok'
    macro   EndOfTest
    tst.b   -$8000(a5)
    beq.s   .allgood\@
    PushStr 'not '
    bsrLong PrintStrFunc
.allgood\@
    move.l  -$7ffc(a5),-(sp)
    bsrLong PrintStrFunc
    endm

; Print the 1..n at the very end
    macro   PrintPlan
    bra     .Skip\@
.StrStart\@
    dc.b    .StrEnd\@-.StrStart\@-1
    dc.b    '1..\<__RS>', 13
.StrEnd\@
    even
.Skip\@
    pea     .StrStart\@
    bsrLong PrintStrFunc
    endm

    macro   n0
    bpl.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: n=1'
    bsrLong PrintStrFunc
Dont\@
    endm

    macro   n1
    bmi.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: n=0'
    bsrLong PrintStrFunc
Dont\@
    endm

    macro   z0
    bne.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: z=1'
    bsrLong PrintStrFunc
Dont\@
    endm

    macro   z1
    beq.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: z=0'
    bsrLong PrintStrFunc
Dont\@
    endm

    macro   v0
    bvc.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: v=1'
    bsrLong PrintStrFunc
Dont\@
    endm

    macro   v1
    bvs.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: v=0'
    bsrLong PrintStrFunc
Dont\@
    endm

    macro   c0
    bcc.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: c=1'
    bsrLong PrintStrFunc
Dont\@
    endm

    macro   c1
    bcs.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: c=0'
    bsrLong PrintStrFunc
Dont\@
    endm

    macro   x0 ; sets z to !x
    move    sr,-(sp)
    btst.b  #4,1(sp)
    addq    #2,sp
    beq.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: x=1'
    bsrLong PrintStrFunc
Dont\@
    endm

    macro   x1 ; sets z to !x
    move    sr,-(sp)
    btst.b  #4,1(sp)
    addq    #2,sp
    bne.s   Dont\@
    st      -$8000(a5)
    PushStrLine '# BAD: x=0'
    bsrLong PrintStrFunc
Dont\@
    endm

PrintD0
    movem.l d0-d2/a0-a1,-(sp)
    lea     PrintD0Field+9,a0
    moveq   #7,d1
.loop
    move.b  d0,d2
    and.b   #$f,d2
    add.b   #48,d2
    cmp.b   #58,d2
    blt     .notletter
    add.b   #7,d2
.notletter
    move.b  d2,-(a0)
    lsr.l   #4,d0
    dbra    d1,.loop
    pea     PrintD0Field
    bsrLong PrintStrFunc
    movem.l (sp)+,d0-d2/a0-a1
    rts
PrintD0Field
    dc.b    9, '00000000', 13

Main
