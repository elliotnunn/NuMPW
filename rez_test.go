// Copyright (c) 2021 Elliot Nunn
// Licensed under the MIT license

package main

import (
	"testing"
)

const article = `data '1293' (128, "\0x00\0x01\0x02\0x03\0x04\0x05\0x06\0x07\b\t\r\v\f\n\0x0E\0x0F\0x10\0x11\0x12\0x13\0x14\0x15\0x16\0x17\0x18\0x19\0x1A\0x1B\0x1C\0x1D\0x1E\0x1F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_abcdefghijklmnopqrstuvwxyz{|}~\?\0x80\0x81\0x82\0x83\0x84\0x85\0x86\0x87\0x88\0x89\0x8A\0x8B\0x8C\0x8D\0x8E\0x8F\0x90\0x91\0x92\0x93\0x94\0x95\0x96\0x97\0x98\0x99\0x9A\0x9B\0x9C\0x9D\0x9E\0x9F\0xA0\0xA1\0xA2\0xA3\0xA4\0xA5\0xA6\0xA7\0xA8\0xA9\0xAA\0xAB\0xAC\0xAD\0xAE\0xAF\0xB0\0xB1\0xB2\0xB3\0xB4\0xB5\0xB6\0xB7\0xB8\0xB9\0xBA\0xBB\0xBC\0xBD\0xBE\0xBF\0xC0\0xC1\0xC2\0xC3\0xC4\0xC5\0xC6\0xC7\0xC8\0xC9\0xCA\0xCB\0xCC\0xCD\0xCE\0xCF\0xD0\0xD1\0xD2\0xD3\0xD4\0xD5\0xD6\0xD7\0xD8\0xD9\0xDA\0xDB\0xDC\0xDD\0xDE\0xDF\0xE0\0xE1\0xE2\0xE3\0xE4\0xE5\0xE6\0xE7\0xE8\0xE9\0xEA\0xEB\0xEC\0xED\0xEE\0xEF\0xF0\0xF1\0xF2\0xF3\0xF4\0xF5\0xF6\0xF7\0xF8\0xF9\0xFA\0xFB\0xFC\0xFD\0xFE") {
	$"2D2D 2D2D 2D2D 2D2D 2D2D 2D2D 2A00 002F"            /* ------------*... */
	$"0001 0203 0405 0607 0809 0A0B 0C0D 0E0F"            /* ................ */
	$"1011 1213 1415 1617 1819 1A1B 1C1D 1E1F"            /* ................ */
	$"2021 2223 2425 2627 2829 2A2B 2C2D 2E2F"            /*  !"#$%&'()*+,-./ */
	$"3031 3233 3435 3637 3839 3A3B 3C3D 3E3F"            /* 0123456789:;<=>? */
	$"4041 4243 4445 4647 4849 4A4B 4C4D 4E4F"            /* @ABCDEFGHIJKLMNO */
	$"5051 5253 5455 5657 5859 5A5B 5C5D 5E5F"            /* PQRSTUVWXYZ[\]^_ */
	$"6161 6263 6465 6667 6869 6A6B 6C6D 6E6F"            /* aabcdefghijklmno */
	$"7071 7273 7475 7677 7879 7A7B 7C7D 7E7F"            /* pqrstuvwxyz{|}~. */
	$"8081 8283 8485 8687 8889 8A8B 8C8D 8E8F"            /* ................ */
	$"9091 9293 9495 9697 9899 9A9B 9C9D 9E9F"            /* ................ */
	$"A0A1 A2A3 A4A5 A6A7 A8A9 AAAB ACAD AEAF"            /* ................ */
	$"B0B1 B2B3 B4B5 B6B7 B8B9 BABB BCBD BEBF"            /* ................ */
	$"C0C1 C2C3 C4C5 C6C7 C8C9 CACB CCCD CECF"            /* ................ */
	$"D0D1 D2D3 D4D5 D6D7 D8D9 DADB DCDD DEDF"            /* ................ */
	$"E0E1 E2E3 E4E5 E6E7 E8E9 EAEB ECED EEEF"            /* ................ */
	$"F0F1 F2F3 F4F5 F6F7 F8F9 FAFB FCFD FEFF"            /* ................ */
};

`

func TestRez(t *testing.T) {
	fork, err := rez([]byte(article))
	if err != nil {
		t.Fatalf("rez() failed: %q", err.Error())
	}

	roundTrip := string(deRez(fork))

	if roundTrip != article {
		t.Fatalf("deRez() differs\n--- expected ---\n%s--- got ---\n%s", article, roundTrip)
	}
}
