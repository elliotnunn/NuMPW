/*
	File:		Notification.h

	Copyright:	Â© 1984-1993 by Apple Computer, Inc., all rights reserved.

	WARNING
	This file was auto generated by the interfacer tool. Modifications
	must be made to the master file.

*/

#ifndef __NOTIFICATION__
#define __NOTIFICATION__

#ifndef __TYPES__
#include <Types.h>
/*	#include <ConditionalMacros.h>								*/
/*	#include <MixedMode.h>										*/
/*		#include <Traps.h>										*/
#endif

#ifndef __OSUTILS__
#include <OSUtils.h>
#endif

enum  {
	nmType						= 8
};

typedef struct NMRec NMRec, *NMRecPtr;

typedef pascal void (*NMProcPtr)(NMRecPtr nmReqPtr);

enum {
	uppNMProcInfo = kPascalStackBased
		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(NMRecPtr)))
};

#if USESROUTINEDESCRIPTORS
typedef UniversalProcPtr NMUPP;

#define CallNMProc(userRoutine, nmReqPtr)		\
		CallUniversalProc((UniversalProcPtr)(userRoutine), uppNMProcInfo, (nmReqPtr))
#define NewNMProc(userRoutine)		\
		(NMUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppNMProcInfo, GetCurrentISA())
#else
typedef NMProcPtr NMUPP;

#define CallNMProc(userRoutine, nmReqPtr)		\
		(*(userRoutine))((nmReqPtr))
#define NewNMProc(userRoutine)		\
		(NMUPP)(userRoutine)
#endif

#if defined(powerc) || defined (__powerc)
#pragma options align=mac68k
#endif
struct NMRec {
	QElemPtr					qLink;							/*next queue entry*/
	short						qType;							/*queue type -- ORD(nmType) = 8*/
	short						nmFlags;						/*reserved*/
	long						nmPrivate;						/*reserved*/
	short						nmReserved;						/*reserved*/
	short						nmMark;							/*item to mark in Apple menu*/
	Handle						nmIcon;							/*handle to small icon*/
	Handle						nmSound;						/*handle to sound record*/
	StringPtr					nmStr;							/*string to appear in alert*/
	NMUPP						nmResp;							/*pointer to response routine*/
	long						nmRefCon;						/*for application use*/
};
#if defined(powerc) || defined(__powerc)
#pragma options align=reset
#endif

#ifdef __cplusplus
extern "C" {
#endif


#if USES68KINLINES
#pragma parameter __D0 NMInstall(__A0)
#endif
extern pascal OSErr NMInstall(NMRecPtr nmReqPtr)
 ONEWORDINLINE(0xA05E);

#if USES68KINLINES
#pragma parameter __D0 NMRemove(__A0)
#endif
extern pascal OSErr NMRemove(NMRecPtr nmReqPtr)
 ONEWORDINLINE(0xA05F);
#ifdef __cplusplus
}
#endif

#endif

