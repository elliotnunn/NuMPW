/*
	File:		Menus.h

	Copyright:	Â© 1984-1993 by Apple Computer, Inc., all rights reserved.

	WARNING
	This file was auto generated by the interfacer tool. Modifications
	must be made to the master file.

*/

#ifndef __MENUS__
#define __MENUS__

#ifndef __QUICKDRAW__
#include <Quickdraw.h>
/*	#include <Types.h>											*/
/*		#include <ConditionalMacros.h>							*/
/*		#include <MixedMode.h>									*/
/*			#include <Traps.h>									*/
/*	#include <QuickdrawText.h>									*/
/*		#include <IntlResources.h>								*/
#endif

#ifndef __DESK__
#include <Desk.h>
#endif

#define noMark '\0'

enum  {
/* menu defProc messages */
	mDrawMsg					= 0,
	mChooseMsg					= 1,
	mSizeMsg					= 2,
	mDrawItemMsg				= 4,
	mCalcItemMsg				= 5,
	textMenuProc				= 0,
	hMenuCmd					= 27,							/*itemCmd == 0x001B ==> hierarchical menu*/
	hierMenu					= -1,							/*a hierarchical menu - for InsertMenu call*/
	mPopUpMsg					= 3,							/*menu defProc messages - place yourself*/
	mctAllItems					= -98,							/*search for all Items for the given ID*/
	mctLastIDIndic				= -99							/*last color table entry has this in ID field*/
};

typedef struct MenuInfo MenuInfo, *MenuPtr, **MenuHandle;

typedef pascal void (*MenuDefProcPtr)(short message, MenuHandle theMenu, Rect *menuRect, Point hitPt, short *whichItem);

enum {
	uppMenuDefProcInfo = kPascalStackBased
		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(short)))
		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(MenuHandle)))
		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(Rect*)))
		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(Point)))
		 | STACK_ROUTINE_PARAMETER(5, SIZE_CODE(sizeof(short*)))
};

#if USESROUTINEDESCRIPTORS
typedef UniversalProcPtr MenuDefUPP;

#define CallMenuDefProc(userRoutine, message, theMenu, menuRect, hitPt, whichItem)		\
		CallUniversalProc((UniversalProcPtr)(userRoutine), uppMenuDefProcInfo, (message), (theMenu), (menuRect), (hitPt), (whichItem))
#define NewMenuDefProc(userRoutine)		\
		(MenuDefUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppMenuDefProcInfo, GetCurrentISA())
#else
typedef MenuDefProcPtr MenuDefUPP;

#define CallMenuDefProc(userRoutine, message, theMenu, menuRect, hitPt, whichItem)		\
		(*(userRoutine))((message), (theMenu), (menuRect), (hitPt), (whichItem))
#define NewMenuDefProc(userRoutine)		\
		(MenuDefUPP)(userRoutine)
#endif

typedef pascal long (*MenuBarDefProcPtr)(short selector, short message, short parameter1, long parameter2);

enum {
	uppMenuBarDefProcInfo = kPascalStackBased
		 | RESULT_SIZE(SIZE_CODE(sizeof(long)))
		 | STACK_ROUTINE_PARAMETER(1, SIZE_CODE(sizeof(short)))
		 | STACK_ROUTINE_PARAMETER(2, SIZE_CODE(sizeof(short)))
		 | STACK_ROUTINE_PARAMETER(3, SIZE_CODE(sizeof(short)))
		 | STACK_ROUTINE_PARAMETER(4, SIZE_CODE(sizeof(long)))
};

#if USESROUTINEDESCRIPTORS
typedef UniversalProcPtr MenuBarDefUPP;

#define CallMenuBarDefProc(userRoutine, selector, message, parameter1, parameter2)		\
		CallUniversalProc((UniversalProcPtr)(userRoutine), uppMenuBarDefProcInfo, (selector), (message), (parameter1), (parameter2))
#define NewMenuBarDefProc(userRoutine)		\
		(MenuBarDefUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppMenuBarDefProcInfo, GetCurrentISA())
#else
typedef MenuBarDefProcPtr MenuBarDefUPP;

#define CallMenuBarDefProc(userRoutine, selector, message, parameter1, parameter2)		\
		(*(userRoutine))((selector), (message), (parameter1), (parameter2))
#define NewMenuBarDefProc(userRoutine)		\
		(MenuBarDefUPP)(userRoutine)
#endif


/*
	typedef pascal short (*MBarHookProcPtr)(Rect* menuRect);
	
		In:
			=>	menuRect		Pascal Stack
		
		Out:
			=>	result			D0.W
*/

enum  {
	uppMBarHookProcInfo			= SPECIAL_CASE_PROCINFO(kSpecialCaseMBarHook)
};

#if USESROUTINEDESCRIPTORS
typedef pascal short (*MBarHookProcPtr)(Rect *menuRect);

typedef UniversalProcPtr MBarHookUPP;

#define CallMBarHookProc(userRoutine, menuRect)  \
	CallUniversalProc((UniversalProcPtr)(userRoutine), uppMBarHookProcInfo, menuRect)

#define NewMBarHookProc(userRoutine)  \
	(MBarHookUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppMBarHookProcInfo, GetCurrentISA())

#else
typedef ProcPtr MBarHookUPP;

#define NewMBarHookProc(userRoutine)  \
	(MBarHookUPP)(userRoutine)

#endif

typedef pascal void (*MenuHookProcPtr)();

enum {
	uppMenuHookProcInfo = kPascalStackBased
};

#if USESROUTINEDESCRIPTORS
typedef UniversalProcPtr MenuHookUPP;

#define CallMenuHookProc(userRoutine)		\
		CallUniversalProc((UniversalProcPtr)(userRoutine), uppMenuHookProcInfo)
#define NewMenuHookProc(userRoutine)		\
		(MenuHookUPP) NewRoutineDescriptor((ProcPtr)(userRoutine), uppMenuHookProcInfo, GetCurrentISA())
#else
typedef MenuHookProcPtr MenuHookUPP;

#define CallMenuHookProc(userRoutine)		\
		(*(userRoutine))()
#define NewMenuHookProc(userRoutine)		\
		(MenuHookUPP)(userRoutine)
#endif

#if defined(powerc) || defined (__powerc)
#pragma options align=mac68k
#endif
struct MenuInfo {
	short						menuID;
	short						menuWidth;
	short						menuHeight;
	Handle						menuProc;
	long						enableFlags;
	Str255						menuData;
};
#if defined(powerc) || defined(__powerc)
#pragma options align=reset
#endif

#if defined(powerc) || defined (__powerc)
#pragma options align=mac68k
#endif
struct MCEntry {
	short						mctID;							/*menu ID.  ID = 0 is the menu bar*/
	short						mctItem;						/*menu Item. Item = 0 is a title*/
	RGBColor					mctRGB1;						/*usage depends on ID and Item*/
	RGBColor					mctRGB2;						/*usage depends on ID and Item*/
	RGBColor					mctRGB3;						/*usage depends on ID and Item*/
	RGBColor					mctRGB4;						/*usage depends on ID and Item*/
	short						mctReserved;					/*reserved for internal use*/
};
#if defined(powerc) || defined(__powerc)
#pragma options align=reset
#endif

typedef struct MCEntry MCEntry;

typedef MCEntry *MCEntryPtr;

typedef MCEntry MCTable[1], *MCTablePtr, **MCTableHandle;

#if defined(powerc) || defined (__powerc)
#pragma options align=mac68k
#endif
struct MenuCRsrc {
	short						numEntries;						/*number of entries*/
	MCTable						mcEntryRecs;					/*ARRAY [1..numEntries] of MCEntry*/
};
#if defined(powerc) || defined(__powerc)
#pragma options align=reset
#endif

typedef struct MenuCRsrc MenuCRsrc;

typedef MenuCRsrc *MenuCRsrcPtr, **MenuCRsrcHandle;

#ifdef __cplusplus
extern "C" {
#endif

#if USESCODEFRAGMENTS
extern pascal short GetMBarHeight(void);
#else
#define GetMBarHeight() (* (short*) 0x0BAA)

#endif

extern pascal void InitMenus(void)
 ONEWORDINLINE(0xA930);
extern pascal MenuHandle NewMenu(short menuID, const Str255 menuTitle)
 ONEWORDINLINE(0xA931);
extern pascal MenuHandle GetMenu(short resourceID)
 ONEWORDINLINE(0xA9BF);
extern pascal void DisposeMenu(MenuHandle theMenu)
 ONEWORDINLINE(0xA932);
extern pascal void AppendMenu(MenuHandle menu, ConstStr255Param data)
 ONEWORDINLINE(0xA933);
extern pascal void AppendResMenu(MenuHandle theMenu, ResType theType)
 ONEWORDINLINE(0xA94D);
extern pascal void InsertResMenu(MenuHandle theMenu, ResType theType, short afterItem)
 ONEWORDINLINE(0xA951);
extern pascal void InsertMenu(MenuHandle theMenu, short beforeID)
 ONEWORDINLINE(0xA935);
extern pascal void DrawMenuBar(void)
 ONEWORDINLINE(0xA937);
extern pascal void InvalMenuBar(void)
 ONEWORDINLINE(0xA81D);
extern pascal void DeleteMenu(short menuID)
 ONEWORDINLINE(0xA936);
extern pascal void ClearMenuBar(void)
 ONEWORDINLINE(0xA934);
extern pascal Handle GetNewMBar(short menuBarID)
 ONEWORDINLINE(0xA9C0);
extern pascal Handle GetMenuBar(void)
 ONEWORDINLINE(0xA93B);
extern pascal void SetMenuBar(Handle menuList)
 ONEWORDINLINE(0xA93C);
extern pascal void InsertMenuItem(MenuHandle theMenu, ConstStr255Param itemString, short afterItem)
 ONEWORDINLINE(0xA826);
extern pascal void DeleteMenuItem(MenuHandle theMenu, short item)
 ONEWORDINLINE(0xA952);
extern pascal long MenuKey(short ch)
 ONEWORDINLINE(0xA93E);
extern pascal void HiliteMenu(short menuID)
 ONEWORDINLINE(0xA938);
extern pascal void SetMenuItemText(MenuHandle theMenu, short item, ConstStr255Param itemString)
 ONEWORDINLINE(0xA947);
extern pascal void GetMenuItemText(MenuHandle theMenu, short item, Str255 itemString)
 ONEWORDINLINE(0xA946);
extern pascal void DisableItem(MenuHandle theMenu, short item)
 ONEWORDINLINE(0xA93A);
extern pascal void EnableItem(MenuHandle theMenu, short item)
 ONEWORDINLINE(0xA939);
extern pascal void CheckItem(MenuHandle theMenu, short item, Boolean checked)
 ONEWORDINLINE(0xA945);
extern pascal void SetItemMark(MenuHandle theMenu, short item, short markChar)
 ONEWORDINLINE(0xA944);
extern pascal void GetItemMark(MenuHandle theMenu, short item, short *markChar)
 ONEWORDINLINE(0xA943);
extern pascal void SetItemIcon(MenuHandle theMenu, short item, short iconIndex)
 ONEWORDINLINE(0xA940);
extern pascal void GetItemIcon(MenuHandle theMenu, short item, short *iconIndex)
 ONEWORDINLINE(0xA93F);
extern pascal void SetItemStyle(MenuHandle theMenu, short item, short chStyle)
 ONEWORDINLINE(0xA942);
extern pascal void GetItemStyle(MenuHandle theMenu, short item, Style *chStyle);
extern pascal void CalcMenuSize(MenuHandle theMenu)
 ONEWORDINLINE(0xA948);
extern pascal short CountMItems(MenuHandle theMenu)
 ONEWORDINLINE(0xA950);
extern pascal MenuHandle GetMenuHandle(short menuID)
 ONEWORDINLINE(0xA949);
extern pascal void FlashMenuBar(short menuID)
 ONEWORDINLINE(0xA94C);
extern pascal void SetMenuFlash(short count)
 ONEWORDINLINE(0xA94A);
extern pascal long MenuSelect(Point startPt)
 ONEWORDINLINE(0xA93D);
extern pascal void InitProcMenu(short resID)
 ONEWORDINLINE(0xA808);
extern pascal void GetItemCmd(MenuHandle theMenu, short item, short *cmdChar)
 ONEWORDINLINE(0xA84E);
extern pascal void SetItemCmd(MenuHandle theMenu, short item, short cmdChar)
 ONEWORDINLINE(0xA84F);
extern pascal long PopUpMenuSelect(MenuHandle menu, short top, short left, short popUpItem)
 ONEWORDINLINE(0xA80B);
extern pascal long MenuChoice(void)
 ONEWORDINLINE(0xAA66);
extern pascal void DeleteMCEntries(short menuID, short menuItem)
 ONEWORDINLINE(0xAA60);
extern pascal MCTableHandle GetMCInfo(void)
 ONEWORDINLINE(0xAA61);
extern pascal void SetMCInfo(MCTableHandle menuCTbl)
 ONEWORDINLINE(0xAA62);
extern pascal void DisposeMCInfo(MCTableHandle menuCTbl)
 ONEWORDINLINE(0xAA63);
extern pascal MCEntryPtr GetMCEntry(short menuID, short menuItem)
 ONEWORDINLINE(0xAA64);
extern pascal void SetMCEntries(short numEntries, MCTablePtr menuCEntries)
 ONEWORDINLINE(0xAA65);
extern pascal void InsertFontResMenu(MenuHandle theMenu, short afterItem, short scriptFilter)
 THREEWORDINLINE(0x303C, 0x0400, 0xA825);
extern pascal void InsertIntlResMenu(MenuHandle theMenu, ResType theType, short afterItem, short scriptFilter)
 THREEWORDINLINE(0x303C, 0x0601, 0xA825);
extern MenuHandle newmenu(short menuID, char *menuTitle);
extern void appendmenu(MenuHandle menu, char *data);
extern void insertmenuitem(MenuHandle theMenu, char *itemString, short afterItem);
extern long menuselect(Point *startPt);
extern void setmenuitemtext(MenuHandle menu, short item, char *itemString);
extern void getmenuitemtext(MenuHandle menu, short item, char *itemString);
#if OLDROUTINENAMES
#define AddResMenu(theMenu, theType) AppendResMenu(theMenu, theType)

#define InsMenuItem(theMenu, itemString, afterItem)  \
	InsertMenuItem(theMenu, itemString, afterItem)

#define DelMenuItem(theMenu, item) DeleteMenuItem(theMenu, item)

#define SetItem(theMenu, item, itemString) SetMenuItemText(theMenu, item, itemString)

#define GetItem(theMenu, item, itemString) GetMenuItemText(theMenu, item, itemString)

#define GetMHandle(menuID) GetMenuHandle(menuID)

#define DelMCEntries(menuID, menuItem) DeleteMCEntries(menuID, menuItem)

#define DispMCInfo(menuCTbl) DisposeMCInfo(menuCTbl)

#define addresmenu(menu, data) appendresmenu(menu, data)

#define getitem(menu, item, itemString) getmenuitemtext(menu, item, itemString)

#define setitem(menu, item, itemString) setmenuitemtext(menu, item, itemString)

#define insmenuitem(theMenu, itemString, afterItem)  \
	insertmenuitem(theMenu, itemString, afterItem)

#endif

#ifdef __cplusplus
}
#endif

#endif

