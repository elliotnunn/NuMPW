
; File: FSPrivate.a
;
; Version 2.0
;
; Copyright Apple Computer, Inc. 1984, 1985, 1986
; All Rights Reserved
;

;--------------------------------------------------------------------
;
; The following information was formerly in "private" files that were
; not released to the general developer community.
;
; The information in this file is not needed for normal application
; development. These equates and macros were necessary for development
; of the Macintosh ToolBox and Operating System, and are likely to be
; dependent on their current implementation. Use of any information
; in this file is likely to cause your software to fail on future
; versions of Macintosh system software or hardware.
;
; Apple Developer Support will not support any use of the following
; information.
;
; In order to prevent any "accidental" use of this information, it has
; been disabled using the conditional-assembly variable defined below.
; If you change this to a non-zero value, you're on your own.

	IF (&TYPE('FSPNonPortable') = 'UNDEFINED') THEN
FSPNonPortable EQU 0
	ENDIF

	IF FSPNonPortable THEN

; Function: This file contains the complete File System equates for MFS and HFS.  It is
;			an extension of the equates defined by old FSEQU.a

;
; Constant definitions
;
BtsPrBlk	EQU    12			; bits per block in volume map (FS volume)
StrtDir 	EQU    2			; directory master block location (block #)
BufSiz		EQU    512			; standard file system buffer size in bytes
HdrSiz		EQU    10			; size of header prefixed to buffer
BufModBit	EQU    7			; dirty bit in high byte of buf tag word
BufFNum 	EQU    -10			; offset from buf start to file number longword
BufFlags	EQU    -6			; offset from buf start to file flags word
BufFBlk 	EQU    -4			; offset from buf start to file block word
BufTag		EQU    -2			; offset from buf start to tag word

NxFreeFN	EQU 	16			; next free file number
NxFreeDID	EQU 	3			; next free directory id
AlBlkSize	EQU 	512 	   ; default allocation block size (1 sector, in bytes)
ClpSize 	EQU 	4*512	   ; default allocation clump size (in bytes)


MaxHFSTrap	EQU    17			; Highest TFS trap dispatch index


;_______________________________________________________________________

; fixed location labels: (equivalent of zero page)


HFSVars 	EQU    $36A 	; Start of TFS variables in RAM version
									; (previously RgSvArea)

HFSTmpSize	EQU    16			; Additional temporary space for TFS
HFSStkLen	EQU    1280 	; Allocate a decent-sized chunk of memory
HFSStkTop	EQU    $36A 	; Temporary location of pointer to top of Stack
HFSStkPtr	EQU    $36E 	; Temporary location of TFS Stack pointer
WDCBsPtr	EQU    $372 	; Working Directory queue header
HFSFlags	EQU    $376 	; Internal TFS flags
DefVRefNum	EQU 	$384	; Default volume's VRefNum (COULD BE WDRefNum!)

;
; Flag bits in HFSFlags byte:
;
HFSReq		EQU    0			; Set if request is specific to TFS
DirCN		EQU    1			; Set if a CNode is a directory
HFSContd	EQU    7			; Set if Async trap is continued
NoPMSP		EQU    6			; Set to disable PMSP completely (status flag)
SkipPMSP	EQU    5			; Set to skip PMSP setup (one-shot)

SysCRefCnt	EQU    $377 		; Usage count byte for system caches (number of vols)
CacheFlag	EQU    $377 		; cache usage count now used as cache flag
CacheVars	EQU    $394
CacheCom	EQU    $39C
noRWIPBit	EQU    7
diskRdBit	EQU    6
SysBMCPtr	EQU    $378 		; System-wide bitmap cache pointer
SysVolCPtr	EQU    $37C 		; System-wide volume cache pointer
SysCtlCPtr	EQU    $380 		; System-wide control cache pointer

PMSPPtr 	EQU    $386 		; Pointer to list of directories on PMSP
HFSDSErr	EQU    $392 		; Final gasp - error that caused IOErr.
HFSVarEnd	EQU    $394 		; End of HFS variable area

HFSStkOvf	EQU    99			; Deep shit alert - HFS stack overflowed.

CurDB		EQU 	$340		; current directory block				
FSCallAsync EQU 	$342		; ONE BYTE FREE 			

NewMount	EQU 	$34A		; (1) used by MountVol to flag new mounts
NoEject 	EQU 	$34B		; used by Eject and Offline

DrMstrBlk	EQU 	$34C		; master directory block in a volume

ErCode		EQU 	$3A2		; use this loc to report errors during async
									;  routines
FSIOErr 	EQU 	$3DE		; last I/O error (NEXT WORD FREE)		

FSQueueHook EQU 	$3E2		; hook to capture all FS calls
ExtFSHook	EQU 	$3E6		   ; command done hook
DskSwtchHook EQU	$3EA		; hook for disk-switch dialog
ReqstVol	EQU 	$3EE		   ; ptr to VCB of off-line or ext fs volume

FSVarEnd	EQU 	$3F6		; end of file system variables
FSVarLth	EQU 	$B6
FSClrWDLen	EQU 	$A2 		   ;length to clear in boot blocks


; Internal File System Error codes
;
; Cache errors

ChNoBuf 	EQU    1				; no free cache buffers (all in use)	
ChInUse 	EQU    2				; requested block in use			
Chnotfound	EQU    3				; requested block not found 		
ChNotInUse	EQU    4				; block being released was not in use	

; FXM Internal error codes:

FXRangeErr	EQU    16				; file position beyond mapped range 
FXOvFlErr	EQU    17				; extents file overflow 			

;  TFS internal errors

FSDSIntErr	EQU    -127 			; Internal file system error

; BTree error codes

BTnotfound	EQU    32				; record not found			
BTexists	EQU    33				; record already exists 			
BTnospace	EQU    34				; no available space				
BTnoFit 	EQU    35				; record doesn't fit in node            
BTbadNode	EQU    36				; bad node detected 		
BTbadHdr	EQU    37				; bad BTree header record detected	
dsBadRotate EQU    64				; bad BTree rotate			

; CM result codes

CMnotfound	EQU    48				; CNode not found			
CMexists	EQU    49				; CNode already exists				
CMnotempty	EQU    50				; directory CNode not empty (valence = 0)
CMRootCN	EQU    51				; invalid reference to root CNode	
CMbadnews	EQU    52				; detected bad catalog structure	


;
; extent key record (prefix xkr)
;
xkrKeyLen	EQU    0			; key length (byte)
xkrFkType	EQU    1			; fork type (byte)
								;	 $00 = data fork
								;	 $FF = resource fork
xkrFNum 	EQU    2			; file number (long)
xkrFABN 	EQU    6			; starting file allocation block number (word)
lenxkr		EQU    8			; length of a xkr

;
; extent data record (prefix xdr)
;
numExts 	EQU    3			; number of extents per record
lenExt		EQU    4			; length of an extent entry
maxExtOff	EQU    lenExt*numExts-lenExt ; max extent entry offset

xdrStABN	EQU    0			; starting physical allocation block number (word)
xdrNumABlks EQU    2			; number of allocation blocks (word)
lenxdr		EQU    12			; length of a xdr (3 extent entries)

;
; FXM variables (FXVars) storage layout
;
FXVFlags   EQU	   0			; FXM Flags (byte)
FXVTContig EQU	   6			; ...try contiguous allocation first
FXVFContig EQU	   7			; ...force contiguous allocation
FXVResrv   EQU	   1			; reserved (byte)
FXVxkrOff  EQU	   2			; offset to extent key record
FXVxdrOff  EQU	   FXVxkrOff+lenxkr ; offset to extent data record
lenFXVars  EQU	   FXVxdrOff+lenxdr ; length of FXM vars



;
; Cache Queue header (prefix CQH)
;
CQHFlink	EQU    0				; (long) forward link pointer
CQHBlink	EQU    4				; (long) backward link pointer
CQHNumBuf	EQU    8				; (word) number of buffers
CQHBufSize	EQU    10				; (word) buffer size
LenCQH		EQU    12				; length of CQH
;
; Cache Buffer Header definition (prefix CBH)
;
CBHFlink	EQU    0				; (long) forward link
CBHBlink	EQU    4				; (long) backward link
CBHVCBPtr	EQU    8				; (long) VCB pointer
CBHFlNum	EQU    12				; (long) file number
CBHFRefNum	EQU    16				; (word) file refnum
CBHDBlk 	EQU    18				; (long) disk block number (-1 = empty)
CBHFlBlk	EQU    22				; (long) file block number
CBHFlags	EQU    26				; (byte) flags
CBHdirty	EQU    7				; ...buffer dirty flag
CBHinuse	EQU    6				; ...buffer in use flag
CBHempty	EQU    5				; ...buffer is empty
CBHFkType	EQU    27				; (byte) fork type
										; ...$00 = data fork
										; ...$FF = resource fork
CBHData 	EQU    28				; start of buffer data area
lenCBH		EQU    28				; length of CBH

; Local buffer equates

COBDBlk 	EQU    CBHDBlk			; (long) disk block 		
COBFlBlk	EQU    CBHFlBlk 		; (long) file block 		
COBFlags	EQU    CBHFlags 		; (byte) flags (only dirty bit is used)

; FlushCache option flags

FCtrash 	EQU    0				; trash buffer contents after flush
kFCtrash	EQU    1				; corresponding constant for MOVEQ load

; GetBlock option flags

GBrelease	EQU    3				; release block immediately after get
GBnoRead	EQU    2				; don't read block from disk
GBexist 	EQU    1				; get existing cache block
GBRead		EQU    0				; read block from disk (forced read)

kGBrelease	EQU    8				; corresponding constants for MOVEQ load
kGBnoRead	EQU    4				;						
kGBexist	EQU    2				;						
kGBRead 	EQU    1				;						

; RelBlock option flags

RBdirty 	EQU    2				; mark buffer dirty
RBtrash 	EQU    1				; trash buffer contents after release
RBwrite 	EQU    0				; force write buffer to disk

kRBdirty	EQU    4				; corresponding constants for MOVEQ load
kRBtrash	EQU    2				;						
kRBwrite	EQU    1				;						



;
; BTree constants
;
BTNodeSize	 EQU   512			   ; default node size
BTMaxDepth	 EQU   8			   ; max tree depth

;
; Tree Path Record (TPR)
;
TPRNodeN	EQU   0 		   ; node number (long)
TPRRIndx	EQU   4 		   ; record index (word)
LenTPR		EQU   6 		   ; length of TPR
LenTPT		EQU   LenTPR*BTMaxDepth   ; length of Tree Path Table

;
; Node Descriptor (prefix ND)
;
NDFlink 	EQU    0			   ; forward link (long)
NDBlink 	EQU    4			   ; backward link (long)
NDType		EQU    8			   ; node type (byte)
NDHdrNode	EQU    1			   ; ...header node
NDMapNode	EQU    2			   ; ...map node
NDIndxNode	EQU    0			   ; ...index node
NDLeafNode	EQU    $FF			   ; ...leaf node
NDNHeight	EQU    9			   ; node height
NDNRecs 	EQU    10			   ; number of records (word)
NDResv2 	EQU    12			   ; reserved (word)

lenND		EQU    14			   ; length of node descriptor

;
; BTree Header (BTH) on disk
;
BTHDepth	EQU    0			   ; current depth of tree (word)
BTHRoot 	EQU    2			   ; root node number (long)
BTHNRecs	EQU    6			   ; number of leaf records in BTree (long)
BTHFNode	EQU    10			   ; node number of 1st leaf node (long)
BTHLNode	EQU    14			   ; node number of last leaf node (long)
BTHNodeSize EQU    18			   ; BTree node size in bytes (word)
BTHKeyLen	EQU    20			   ; Max. key length (word)
BTHNNodes	EQU    22			   ; total number of nodes (long)
BTHFree 	EQU    26			   ; number of free nodes (long)
lenMemBTH	EQU    30			   ; length of memory resident portion of BTH
;
BTHResv 	EQU    30			   ; reserved (76 bytes)
LenBTH		EQU    106			   ; length of a BTH
;
; BTree Control Block (BTCB) in memory
;
BTCFlags	EQU    0			   ; flags (byte)
BTCDirty	EQU    7			   ; ...dirty flag
BTCKeyUpd	EQU    6			   ; ...index key update required
BTCNewIRec	EQU    5			   ; ...new index record required
BTCDelIRec	EQU    4			   ; ...index record delete required
BTCResv 	EQU    1			   ; reserved (byte)
BTCRefNum	EQU    2			   ; file refnum (word)
BTCKeyCR	EQU    4			   ; pointer to ext key compare routine (long)
BTCCQPtr	EQU    8			   ; pointer to cache queue (long)
BTCVarPtr	EQU    12			   ; pointer to BTree variables (long)
BTCLevel	EQU    16			   ; current level (word)
BTCNodeM	EQU    18			   ; current node mark (long)
BTCIndexM	EQU    22			   ; current index mark (word)
;
; this part of a BTCB is the memory resident portion of the BTH
;
BTCDepth	EQU    24			   ; current depth of tree (word)
BTCRoot 	EQU    26			   ; root node number (long)
BTCNRecs	EQU    30			   ; number of leaf records in BTree (long)
BTCFNode	EQU    34			   ; node number of 1st leaf node (long)
BTCLNode	EQU    38			   ; node number of last leaf node (long)
BTCNodeSize EQU    42			   ; BTree node size in bytes (word)
BTCKeyLen	EQU    44			   ; max key length (word)
BTCNNodes	EQU    46			   ; total number of nodes (long)
BTCFree 	EQU    50			   ; number of free nodes (long)

LenBTCB 	EQU    54			   ; length of a BTCB

;
; BTree Variables (BTVars) layout
;
BTVTPTable	EQU    0			   ; Tree Path Table
BTVRecord	EQU    BTVTPTable+LenTPT  ; record buffer



;
; constants
;
CMMaxKey	EQU    37			; max catalog key length
CMMaxCName	EQU    31			; max CName length
CMClpSize	EQU    20			; catalog clump size
;
; CNode types
;
CMDirCN 	EQU    1			; directory CNode
CMFilCN 	EQU    2			; file CNode
;
; catalog key record (prefix ckr)
;
ckrKeyLen	EQU    0			; key length (byte)
ckrResrv1	EQU    1			; reserved (byte)
ckrParID	EQU    2			; parent directory ID (long)
ckrCName	EQU    6			; CNode name (str31)
lenckr		EQU    38			; length of a ckr

;
; catalog data record (prefix cdr)
;
cdrType 	EQU    0			; record type (byte)
cdrResrv2	EQU    1			; reserved (byte)
cdrData 	EQU    2			; start of catalog record data

;
; catalog data record types (variants)
;
cdrDirRec	EQU    CMDirCN	   ; directory record (directory CNode type)
cdrFilRec	EQU    CMFilCN	   ; file record (file CNode type)
cdrThdRec	EQU    3			; thread record

;
; catalog directory record (prefix dir)
;
dirFlags	EQU    2			; flags(word)
dirVal		EQU    4			; valence (word)
dirDirID	EQU    6			; DirID for this directory (long)
dirCrDat	EQU    10			; date/time created (long)
dirMdDat	EQU    14			; date/time last modified (long)
dirBkDat	EQU    18			; date/time last backed up (long)
dirUsrInfo	EQU    22			; User info bytes (16 bytes)
dirFndrInfo EQU    38			; Finder Info bytes (16 bytes)
dirResrv	EQU    54			; reserved (16 bytes)

lendir		EQU    70			; length of a directory record

;
; catalog thread record (prefix thd)
;
thdResrv	EQU    2			; reserved (8 bytes)
thdParID	EQU    10			; Parent ID for this directory (long)
thdCName	EQU    14			; CName for this directory (str31)

lenthd		EQU    46			; length of a thread record

;
; catalog file record (prefix fil)
;

filWrtFlag	EQU    0			; write-allowed bit in flags byte (0 if allowed)
filTypMask	EQU    $FE			; (user file-type in bits 1-7)

filFlags	EQU    2			; bit 7=1 (used), bit 0=file lock flag
filTyp		EQU    3			; file type (used as a name extension)
filUsrWds	EQU    4			; user words for file. (16 bytes)
filFlNum	EQU    20			; file number

filStBlk	EQU    24			; Start file block (alloc blk size)(0000 if none)
filLgLen	EQU    26			; File logical length in bytes (EOF)
filPyLen	EQU    30			; File physical length in bytes

filRStBlk	EQU    34			; Start file block, resource fork (0000 if none)
filRLgLen	EQU    36			; File logical length (EOF), resource fork
filRPyLen	EQU    40			; File physical length, resource fork

filCrDat	EQU    44			; date/time created (long)
filMdDat	EQU    48			; date/time last modified (long)
filBkDat	EQU    52			; date/time last backed up (long)
filFndrInfo EQU    56			; Additional finder info for file (16 bytes)
filClpSize	EQU    72			; file clump size (word)
filExtRec	EQU    74			; First 3 data fork extents (12 bytes)
filRExtRec	EQU    86			; First 3 resource fork extents (12 bytes)
filResrv	EQU    98			; reserved (4 bytes)

lenfil		EQU    102			; length of a file record

lencdr		EQU    lenfil	   ; max length of a catalog data record

;
; CM variables (CM vars) storage layout
;
ckrOff		EQU    0			; offset to catalog key record buffer
cdrOff		EQU    ckrOff+lenckr ; offset to catalog data record buffer
lenCMVars	EQU    lencdr+lenckr ; length of CM vars

; further file system equates

CkdDB		EQU    $340 	   ; (2) used when searching the directory
NxtDB		EQU    $342
MaxDB		EQU    $344
FlushOnly	EQU    $346 	   ; (1) flag used by UnMountVol,FlushVol,
RegRsrc 	EQU    $347 	   ; (1) flag used by OpenRF, FileOpen
FLckUnlck	EQU    $348 	   ; (1) flag used by SetFilLock,RstFilLock
FrcSync 	EQU    $349 	   ; (1) when set, all fs calls are sync'ed

RgSvArea	EQU    $36A 	   ; reg save during async calls.
Params		EQU    $3A4 	   ; 50 bytes long. For I/O parameter blocks.
FSTemp8 	EQU    $3D6 	   ; used by rename
FSTemp4 	EQU    $3DE 	   ; used by rename, ckfilmod

FSVrsn		EQU    '1.2A'	   ; Current file system version


		ENDIF  ;end exclusion of private information
	
	
;_______________________________________________________________
;
; External File System support traps [internal use only]
;
		Macro
		_SetupWDCB
		MOVEQ		#13,D0
		DC.W		$A260
		Endm

		Macro
		_SetupDef
		MOVEQ		#14,D0
		DC.W		$A260
		Endm			

		Macro
		_ReadWDCB
		MOVEQ		#15,D0
		DC.W		$A260
		Endm			

