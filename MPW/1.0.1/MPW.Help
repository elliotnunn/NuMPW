MPW 1.0 Help Summaries

	Help summaries are available for each of the MPW commands.	
	To see the list of commands enter "Help Commands". In addition, 
	brief descriptions of Expressions, Selections, Patterns and
	the Characters that have special meaning to the MPW Shell are
	also included.

	To see Help summaries, Enter a command such as

	Help commandName	# information about commandName
	Help Commands		# a list of commands
	Help Expressions	# summary of expressions
	Help Patterns		# summary of patterns (regular expressions)
	Help Selections 	# summary of selections
	Help Characters 	# summary of MPW Shell special characters

	Copyright Apple Computer, Inc. 1986
	All rights reserved.

-	
Commands

	AddMenu 		# add menu item
	Adjust			# adjust lines
	Alert			# display alert box
	Alias			# define and write command aliases
	Align			# align text to left margin
	Asm 			# 68xxx Macro Assembler
	Beep			# generate tones
	Begin			# group commands
	Break			# break from For or Loop
	C				# C compiler
	Canon			# canonical spelling tool
	Catenate		# concatenate files
	Clear			# clear the selection
	Close			# close a window
	Compare 		# compare text files
	Confirm 		# display confirmation dialog
	Continue		# continue with next iteration of For or Loop
	Copy			# copy selection to Clipboard
	Count			# count lines and characters
	Cut 			# copy selection to Clipboard and delete it
	CvtObj			# convert Lisa object files to MPW object files
	Date			# write the date and time
	Delete			# delete files and directories
	DeleteMenu		# delete user-defined menus and items
	DeRez			# resource decompiler
	Directory		# set or write the default directory
	DumpCode		# write formatted CODE resources
	DumpObj 		# write formatted object files
	Duplicate		# duplicate files and directories
	Echo			# echo parameters
	Eject			# eject volumes
	Entab			# convert runs of blanks to tabs
	Equal			# compare files and directories
	Erase			# initialize volumes
	Evaluate		# evaluate an expression
	Execute 		# execute command file in current scope
	Exit			# exit from command file
	Export			# make variables available to commands
	FileDiv 		# divide file into several smaller files
	Files			# list files and directories
	Find			# find and select a text pattern
	Font			# set font characteristics
	For 			# repeat commands once per parameter
	Help			# write summary information
	If				# conditional command execution
	Lib 			# combine object files
	Link			# link an application, tool, or resource
	Loop			# repeat commands until Break
	Make			# program construction tool
	MDSCvt			# convert MDS assembler source
	Mount			# mount volumes
	Move			# move files and directories
	New 			# open new file in window
	NewFolder		# create folder
	Open			# open file in window
	Parameters		# write parameters
	Pascal			# Pascal compiler
	PasMat			# format Pascal programs
	PasRef			# cross reference Pascal programs
	Paste			# replace selection with Clipboard contents
	Print			# print text files
	Rename			# rename files and directories
	Replace 		# replace the selection
	Request 		# request text from a dialog
	Rez 			# resource compiler
	RezDet			# resource detective
	Save			# save contents of window
	Search			# search files for pattern
	Set 			# define or write Shell variables
	Setfile 		# set file attributes
	Shift			# renumber command file positional parameters
	Tab 			# set a window's tab setting
	Target			# make window the target window
	TLACvt			# convert Lisa TLA assembler source
	Unalias 		# remove aliases
	Unmount 		# unmount volumes
	Unset			# remove Shell variable definitions
	Volumes 		# list mounted volumes
	Windows 		# list windows

-
Characters

	The charaters listed below have special meanings in the command language.


	Space			Space separates words.
	Tab 			Tab also separates words.

	Return			Return separates commands.
	;				Semicolon also separates commands.
	|				Pipe separates commands and pipes output to input.
	&&				And separates commands, executing second if first succeeds.
	||				Or separates commands, executing second if first fails.
	(…) 			Parenthesis group commands.
					Parenthesis also group characters in filename patterns.

	#				Comment begins comments.

	∂				Escape (Option-D) quotes the following character.
	'…' 			Single quote quotes all other characters.
	"…" 			Double quote quotes all characters except ∂, {, and `.
	/…/ 			Slash quotes all characters except ∂, {, and `.
	\…\ 			Backslash quotes all characters except ∂, {, and `.

	{…} 			Braces denote variable substitution.
	`…` 			Backquotes denote command substutution.

	?				Question mark matches any character in filename patterns.
	≈				Approximately (Option-X) matches any string in patterns.
	[…] 			Brackets enclose character sets in filename patterns.
	*				Star indicates zero or more repetitions in patterns.
	+				Plus indicates one or more repetitions in patterns.
	«…» 			European quotes (Option-\) enclose repeat counts.

	<				Less-than indicates an input file specification.
	>				Greater-than indicates an output file specification.
	≥				Greater-than-or-equal indicates a diagnostic specification.

	…				Elipsis (Option-;) is reserved for future use.

-
Expressions

	The operators listed below are used in expressions in the
	Evaluate, If, Else, Break, Continue, and Exit commands. 


	(…) 			grouping

	-				unary negation
	~				bitwise negation
	!	 NOT  ¬ 	logical NOT (¬ is Option-L)

	*				multiplication
	÷	 DIV		division (÷ is Option-/)
	%	 MOD		modulus division

	+				addition
	-				subtraction

	<<				shift left
	>>				shift right

	<				less than
	<=	 ≤			less than or equal (≤ is Option-<)
	>				greater than
	>=	 ≥			greater than or equal (≥ is Option->)

	==				equal
	!=	 <>   ≠ 	not equal (≠ is Option-=)
	=~				equal to a pattern
	!~				not equal to a pattern

	&				bitwise AND

	^				bitwise XOR

	|				bitwise OR

	&&	 AND		logical AND

	||	 OR 		logical OR


	Alternate spellings of several operators are provided.
	All of the operators are evaluated from left to right.
	Operators with the highest precedence are listed first,
	and operators in the same group have equal precedence.

-
Selections - selections specify a selection or insertion point

	§						current selection (Option-6)
	n						line number n
	!n						line n lines after end of current selection
	¡n						line n lines before start of selection (Option-!)
	position				position (defined below)
	pattern 				pattern  (defined below)
	(selection) 			selection grouping
	selection:selection 	both selections and everything in between
	
position - positions specify an insertion point

	•						position before first character of file (Option-8)
	∞						position after last character of file (Option-5)
	∆selection				position before first character of selection
	selection∆				position after last character of selection (Option-J)
	selection!n 			position n characters after selection
	selection¡n 			position n characters before selection (Option-!)
	
pattern - patterns specify characters to be matched

	/entireRE/				regular expression - search forward
	\entireRE\				regular expression - search backward
	
	Help Patterns			# See "Help Patterns" for more information.
	
-
Patterns - Patterns specify characters to be matched

	/entireRE/				regular expression - search forward
	\entireRE\				regular expression - search backward
	
entireRE

	•RE 					regular expression at beginning of line (Option-8)
	RE∞ 					regular expression at end of line (Option-5)
	RE						regular expression
	
RE

	simpleExpr				simple regular expression - defined below
	(RE)®digit				tagged RE - refer to match as ®digit (Option-R)
	'string'				literal - no characters within '…' are special
	"string"				literal - only ∂, {, and ` are special within '…'
	RE1RE2					regular expression RE1 followed by RE2
	
simpleExpr
	
	(RE)					regular expression grouping
	charExpr				single character regular expression - defined below
	simpleExpr* 			simple expression zero or more times
	simpleExpr+ 			simple expression one of more times
	simpleExpr«n»			simple expression n times (Option-\, Option-Shift-\)
	simpleExpr«n,»			simple expression at least n times
	simpleExpr«n1,n2»		simple expression at least n1, at most n2 times
	
charExpr
	
	character				character (unless it has special meaning)
	∂character				character - defeats any special meaning (Option-D)
	?						any character except Return
	≈						zero or more characters, except Return (Option-X)
	[charList]				any character in the list
	[¬charList] 			any character not in the list (Option-L)
	
charList

	]						] first in the list represents itself
	-						- first in the list represents itself
	character				character
	charList character		list of characters
	character-character 	character range (e.g. A-Z)
	
-
AddMenu [menu [item [command…]]]  > menuList
-
Adjust [-c count] [-l spaces] selection [window]
	-c count				# repeat the Adjust count times
	-l spaces				# shift lines right spaces
-	
Alert message
-	
Alias [name [word…]]  > aliasList
-	
Align [-c count] selection [window]
	-c count				# repeat the Align count times
-	
Asm [option…] [file…]  < file > listing ≥ progress
	-addrsize size			# set size of address display
	-blksize blocks 		# use blocks * 512 byte I/O buffers
	-case on				# distinguish between upper and lower case
	-case obj[ect]			# preserve case in object file
	-case off				# ignore case (default)
	-c[heck]				# syntax check only, don't create object file
	-d[efine] name			# equivalent to  name EQU 1
	-d[efine] name=value	# equivalent to  name EQU value
	-d[efine] &name 		# equivalent to  &name SET[AC] 1
	-d[efine] &name=value	# equivalent to  &name SET[AC] value
	-e[rrlog] file			# write errors and warnings to file
	-f						# suppress page ejects in listing
	-font name[,size]		# set listing font and size
	-h						# suppress page headers in listing
	-i directory,…			# search for includes in directory,…
	-l						# write full listing to output
	-o objname				# generate code in file or directory objname
	-pagesize l[,w] 		# set listing page length and width
	-print mode 			# equivalent to  PRINT mode
	-p						# write progress information to diagnostics
	-s						# write short listing to output
	-t						# write time and total lines to diagnostics
	-w						# suppress warnings
	-wb 					# suppress warnings on branch instructions
-	
Beep [note [,duration [,level]]]…
-	
Begin
	command…
End
-	
Break [If expression]
-	
C [option…] [file]	< file > preprocessor ≥ progress
	-c						# write comments with preprocessor output
	-d name 				# equivalent to  #define name 1
	-d name=string			# equivalent to  #define name string
	-e						# write preprocessor results to output
	-g						# generate function names in code (implies -ga)
	-ga 					# always generate stack frames (LINK, UNLK)
	-i directory			# search for includes in directory
	-o objname				# generate code in file objname
	-p						# write progress information to diagnostics
	-q						# optimize for speed at the expense of space
	-q2 					# optimizer may assume no multitasking
	-s segment				# generate code in segment
	-u name 				# equivalent to  #undef name
	-w						# suppress warnings
	-x6 					# avoid non-stack CLR x instructions
	-x12					# generate 68010 code
	-x55					# make bitfields signed
	-z6 					# always allocate 32 bits for enums
	-z84					# enable language anachronisms
-	
Canon [option…] dictionary [file…]	< file > new
	-s						# case-sensitive replacement
	-a						# assembler identifiers (include $, %, @)
	-c chars				# consider only the first chars characters
-	
Catenate [file…]  < file > catenation
-	
Clear [-c count] selection [window]
	-c count				# repeat the Clear count times
-	
Close [-n | -y] [window]
	-n						# don't save the window (avoids dialog)
	-y						# save the window before closing (avoids dialog)
-	
Compare [option…] file1 [file2]  < file2 > differences ≥ progress
	-b						# treat several blanks or tabs as a single blank
	-c c1-c2[,c1-c2]		# compare only specified columns
	-d depth				# maximum stack depth
	-g groupingFactor		# grouping factor (matching lines for resync)
	-h width				# write differences horizontally
	-l						# lower case (i.e. ignore case differences)
	-n						# don't write to output if files match
	-p						# write progress information to diagnostics
	-s						# use static grouping factor
	-t						# ignore trailing blanks
	-x						# don't expand tabs
-	
Confirm [-t] message
	-t						# three buttons (Yes, No, Cancel)
-	
Continue [If expression]
-	
Copy [-c count] selection [window]
	-c count				# Copy the nth selection, where n = count
-	
Count [-l] [-c] [file…]  < file > counts
	-l						# write only line counts
	-c						# write only character counts
-	
Cut [-c count] selection [window]
	-c count				# Cut the next count selections
-	
CvtObj [option…] LisaObjectFile  ≥ progress
	-n namesFile			# use name substitutions in nameFile
	-o objectFile			# create file objectFile
	-p						# write progress information to diagnostics
-	
Date [-a | -s] [-d | -t]  > date
	-a						# abbreviated date (e.g. Wed, Jun 18, 1986)
	-d						# write date only
	-s						# short date (6/18/86)
	-t						# write time only
-	
Delete [-n | -y] [-i] [-p] name…  ≥ progress
	-i						# ignore errors (no diagnostics, status 0)
	-n						# don't delete directory contents (avoids dialog)
	-p						# write progress information to diagnostics
	-y						# delete directory contents (avoids dialog)
-	
DeleteMenu [menuName [itemName]]
-	
DeRez [option…] resourceFile [file…]  > description ≥ progress
	-d[efine] name[=value]	# equivalent to  #define name [value]
	-m[axstringsize] n		# write strings n characters per line
	-only typeExpr			# process only resources of this type
	-p						# write progress information to diagnostics
	-rd 					# suppress warnings for redeclared types
	-s[kip] typeExpr		# skip resources of this type
	-u[ndef] name			# equivalent to  #undef name

	Note: A typeExpr may have one of these forms:
		  type
		"'type'(id)"
		"'type'(id:id)"
		"'type'(∂"name∂")"
-	
Directory [-q] [directory]	> directory
	-q						# don't quote directories with special characters
-	
DumpCode [option…] resourceFile  > dump ≥ progress
	-d						# don't dump object code
	-h						# don't write headers (offsets, hex, etc.)
	-jt 					# don't dump jump table
	-n						# dump only resource names
	-p						# write progress information to diagnostics
	-r byte1[,byte2]		# dump code from address byte1 (through byte2)
	-rt type[=id]			# dump only resources with this type (and id)
	-s name 				# dump only resource with this name
-	
DumpObj [option…] objectFile  > dump ≥ progress
	-d						# don't dump object code
	-h						# don't write headers (offsets, hex, etc.)
	-i						# use ids, rather than names, in dump
	-l						# dump file locations of object records
	-m name 				# dump only module name, or module with entry name
	-n						# dump only the dictionary of names
	-p						# write progress information to diagnostics
	-r byte1[,byte2]		# dump code from byte1 in file (through byte2)
-	
Duplicate [-n | -y] [-p] [-d | -r] name… target  ≥ progress
	-d						# Duplicate data fork only
	-n						# don't overwrite target files (avoids dialog)
	-p						# write progress information to diagnostics
	-r						# duplicate resource fork only
	-y						# overwrite target files (avoids dialog)
-	
Echo [-n] [parameter…]	> parameters
	-n						# don't write return following the parameters
-	
Eject [-m] volume…
	-m						# leave the volume mounted
-	
Entab [option…] [file…]  < file > tabbed ≥ progress
	-d tabValue 			# input tab setting
	-l quote…				# left quotes that prevent EnTab (default '")
	-n						# no quote characters, EnTab everything
	-p						# write progress information to diagnostics
	-q quote…				# quotes that prevent EnTab (default '")
	-r quote…				# right quotes that prevent EnTab (default '")
	-t tabValue 			# output tab setting
-	
Equal [-d | -r] [-i] [-p] [-q] name… target  > differences ≥ progress
	-d						# compare data forks only
	-i						# ignore files in target not in directory name
	-r						# compare resource forks only
	-p						# write progress information to diagnostics
	-q						# quiet - don't write output, just set {Status}
-	
Erase [-y] [-s] volume…
	-y						# yes - erase the disk (avoids dialog)
	-s						# single-sided - 400K (default 800K)
-
Evaluate [word…]  > value
-
Execute commandFile
-
Exit [status] [If expression]
-
Export [name…]	> exports
-
FileDiv [option…] file [prefix]  ≥ progress
	-f						# split file at formfeed character
	-n splitPoint			# split file after splitPoint lines
	-p						# write progress information to diagnostics
-	
Files [-l] [-r] [-q] [-c creator] [-t type] [name…]  > fileList
	-c creator				# list only files with this creator
	-l						# long format (type, creator, size, dates, etc.)
	-q						# don't quote filenames with special characters
	-r						# recursively list subdirectories
	-t type 				# list only files with this type
-	
Find [-c count] selection [window]
	-c count				# Find the nth selection, where n = count
-	
Font fontname fontsize [window]
-
For name In word…
	command…
End
-	
Help [-f helpfile] [command…]  > helpInformation
	-f helpfile 			# alternate helpfile (default MPW.Help)
-
If expression
	command…
[Else If expression
	command… ] …
[Else
	command… ]
End
-	
Lib [option…] objectFile…  ≥ progress
	-b						# big Lib - equivalent to -bf -bs 4
	-bf 					# open one file at a time, allowing many files
	-bs n					# use n * 512 byte input buffer (default n=16)
	-d						# suppress duplicate definition warnings
	-df deleteFile			# delete modules listed in file deleteFile
	-dm name[,name]…		# delete external modules and entry points
	-dn name[,name]…		# delete external names, making them local
	-o name 				# write object file name (default Lib.Out.o)
	-p						# write progress information to diagnostics
	-sg newSeg=old[,old]…	# merge old segments into new segment
	-sn oldSeg=newSeg		# change segment name oldSeg to newSeg
	-w						# suppress warnings
-
Link [option…] objectFile…	> map ≥ progress
	-b						# big Link - equivalent to -bf -bs 4
	-bf 					# open one file at a time, allowing many files
	-bs n					# use n * 512 byte input buffer (default 16)
	-c creator				# set resourceFile creator (default ????)
	-d						# suppress duplicate definition warnings
	-da 					# desk accessory - add NULL to segment names
	-l						# write a location map to output
	-la 					# list anonymous symbols in location map
	-lf 					# list file and location of definitions
	-m	mainEntry			# use mainEntry as main entry point
	-ma name=alias			# create an alias for module name
	-o resourceFile 		# write resourceFile (default Link.Out)
	-p						# write progress information to diagnostics
	-ra [segment]=attr		# set segment resource attributes
	-rn 					# don't include resource names in resourceFile
	-rt type=id 			# set resource type and lowest id (default CODE=0)	
	-sg newSeg=old[,old]…	# merge old segments into new segment
	-sn oldSeg=newSeg		# change segment name oldSeg to newSeg
	-ss size				# maximum segment size (default 32760)
	-t type 				# set resourceFile type (default APPL)
	-uf unrefFile			# write list of unreferenced modules to unrefFile
	-w						# suppress warnings
	-x crossRefFile 		# write cross reference to crossRefFile
-	
Loop
	command…
End
-	
Make [option…] target…	> commands ≥ progress
	-d name[=value] 		# define variable name as value (overrides makefile)
	-e						# rebuild everything regardless of dates
	-f makefile 			# read dependencies from makefile (default MakeFile)
	-p						# write progress information to diagnostics
	-r						# write roots of dependency graph to output
	-s						# write structure of target dependencies to output
	-t						# touch dates of targets and prerequisities
	-u						# identify targets in makefile not reached in build
	-v						# write verbose explanations to diagnostics
	-w						# suppress warnings
-
MDSCvt [option…] [file…]  < file > output ≥ progress
	-d						# detab - replace tabs with spaces
	-e						# detab input and entab output
	-f directivesFile		# read case of directives from directivesFile
	-g n					# size of Quickdraw global area for main program	
	-i						# convert include file - don't add PROC and END
	-m						# omit BLANKS ON and STRING ASIS from output
	-main					# convert main program source
	-n						# don't add .a suffix to form output filename
	-p						# write progress information to diagnostics
	-pre[fix] string		# add prefix to input filename to form output name
	-suf[fix] string		# add suffix to input filename to form output name
	-t value				# output file tab setting
	-u c					# use character c to make macro names unique
	-! name 				# name of main program's entry point
-	
Mount drive…
-
Move [-n | -y] [-p] name… target  ≥ progress
	-n						# don't overwrite target files (avoids dialog)
	-p						# write progress information to diagnostics
	-y						# overwrite target files (avoids dialog)
-
New [name]
-
NewFolder name…
-
Open [-n | -r] [-t] [name]
	-n						# Open new file (default name Untitled)
	-r						# Open file for read-only use
	-t						# Open file as the target window
-
Parameters [parameter…]  > parameters
-
Pascal [option…] [file…]  < file ≥ progress
	-b						# generate A5 references for procedure addresses
	-c						# syntax check only, don't create object file
	-d name=(TRUE|FALSE)	# set compile time variable name
	-e file 				# write errors to file
	-g						# code generation only - reads file.o.i
	-i directory,…			# search for includes in directory,…
	-k directory			# create $LOAD files in directory
	-o objname				# generate code in file or directory objname
	-opt					# suppress code register optimizations
	-ov 					# generate code to test for overflow
	-p						# write progress information to diagnostics
	-r						# don't generate range checking code
	-s						# swap the compiler (use on Macintosh 512K)
	-t						# write compilation time to diagnostics
	-y directory			# create temporary files in directory	
-	
PasMat [option…] [input [output]]  < input > output ≥ progress
	-a						# set a-  disable CASE label bunching
	-b						# set b+  enable IF bunching
	-body					# set body+ to disable indenting procedure bodies
	-c						# set c+  suppress Return before BEGIN
	-d						# set d+  use {…} comment delimiters
	-e						# set e+  capitalize identifiers
	-entab					# replace multiple blanks with tabs
	-f						# set f-  disable formatting
	-g						# set g+  group assignment and call statements
	-h						# set h-  disable FOR, WHILE, WITH bunching
	-i directory,…			# search for includes in directory,…
	-in 					# set in+ process includes
	-k						# set k+  indent statements between BEGIN and END
	-l						# set l+  literally copy reserved words, identifiers
	-list file				# write listings to file
	-n						# set n+  group formal parameters
	-o width				# set output line width (default 80)
	-p						# write progress information to diagnostics
	-pattern -old-new-		# modify include names, changing old to new
	-q						# set q+  no special ELSE IF formatting
	-r						# set r+  upper case reserved words
	-rec					# set rec+ to indent field lists under defined id
	-s file 				# substitute identifiers based on pairs in file
	-t tab					# set output tab setting (default 2)
	-u						# rename identifiers to match first occurance
	-v						# set v+  put THEN on separate line
	-w						# set w+  upper case identifiers
	-x						# set x+  suppress space around operators
	-y						# set y+  suppress space around :=
	-z						# set z+  suppress space after commas
	-:						# set :+  align colons in VAR declarations
	-@						# set @+  multiple CASE tags on separate lines
	-∂# 					# set #+  smart grouping of assignments and calls
	-_						# set _+  delete _ from identifiers
-	
PasRef [option…] [file…]  < file > crossReference ≥ progress
	-a						# process includes and units each time encountered
	-c						# process includes and units only once
	-d						# process each file separately
	-i directory,…			# search for includes in directory,…
	-l						# write identifiers in lower case
	-n						# don't process USES or includes
	-ni | -noi[ncludes] 	# don't process include files
	-nl | -nol[istings] 	# don't list the input
	-nolex					# don't write lexical information
	-nt | -not[otal]		# don't write total line count
	-nu | -nou[ses] 		# don't process USES declatations   
	-o						# source written using Object Pascal
	-p						# write progress information to diagnostics
	-s						# don't write include and USES filenames
	-t						# cross reference by total line number
	-u						# write identifiers in upper case
	-w width				# set output line width (default 110)
	-x width				# set maximum identifier width
-
Paste [-c count] selection [window]
	-c count				# repeat the Paste count times
-
Print [option…] [file…]  < file ≥ progress
	-b						# print a border around the text
	-bm n[.n]				# bottom margin in inches (default 0)
	-c[opies] n 			# print n copies
	-f[ont] name			# print using specified font
	-from n 				# begin printing with page n
	-h						# print headers (time, file, page)
	-hf[ont] name			# print headers using specified font
	-hs[ize] n				# print headers using specified font size
	-l[ines] n				# print n lines per page
	-lm n[.n]				# left margin in inches (default .2778)
	-ls n[.n]				# line spacing (2 means double-space)
	-n						# print line numbers to left of text
	-nw [-]n				# width of line numbers, - indicates zero padding
	-p						# write progress information to diagnostics
	-page n 				# number pages beginning with n
	-r						# print pages in reverse order
	-rm n[.n]				# right margin in inches (default 0)
	-s[ize] n				# print using specified font size
	-t[abs] n				# consider tabs to be n spaces
	-title title			# include title in page headers
	-tm n[.n]				# top margin in inches (default 0)
	-to n					# stop printing after page n
	-q quality				# print quality (HIGH, STANDARD, DRAFT)
-	
Rename [-n | -y] oldName newName
	-n						# don't overwrite existing file (avoids dialog)
	-y						# overwrite existing file (avoids dialog)
-	
Replace [-c count] selection replacement [window]
	-c count				# repeat the replace count times
-	
Request [-d default] message
	-d default				# set default response
-
Rez [option…] [file…]  < file ≥ progress
	-c[reator] creator		# set output file creator
	-d[efine] name[=value]	# equivalent to  #define macro [value]
	-o file 				# write output to file (default Rez.Out)
	-p						# write progress information to diagnostics
	-rd 					# suppress warnings for redeclared types
	-ro 					# set the mapReadOnly flag in output
	-t[ype] type			# set output file type
	-u[ndef] name			# equivalent to  #undef name
-	
RezDet [option…] file…	> dump
	-b[ig]					# read resources one at a time, not all at once
	-d[ump] 				# write -show information, plus headers, lists, etc.
	-l[ist] 				# write list of resources with minimum information
	-q[uiet]				# don't write any output, just set {Status}
	-r[awdump]				# write -dump information plus contents
	-s[how] 				# write information about each resource
	
	Note: Use at most one of -quiet, -list, -show, -dump, and -rawdump.
-
Save [-a | window]
	-a						# save the contents of all windows
-
Search [-l] pattern [file…]  < file > found
	-l						# include line numbers in output
-
Set [name [value]]	> variableList
-
Setfile [option…] file…
	-a attributes			# attributes (lowercase = 0, uppercase = 1)
	-c creator				# file creator
	-d date 				# creation date (mm/dd/yy [hh:mm:ss [AM | PM]])
	-l h,v					# ICON location (horizontal,vertical)
	-m date 				# modification date (mm/dd/yy [hh:mm:ss [AM | PM]])
	-t type 				# file type

	Note: Period (.) represents the current date and time.
	Note: The following attributes may be used with the -a option:
		 L	 Locked
		 V	 Invisible
		 B	 Bundle
		 S	 System
		 I	 Inited
		 D	 Desktop
-
Shift [n]
-
Tab spaces [window]
-
Target name
-
TLACvt [option…] [file…]  < file > output ≥ progress
	-d						# detab - replace tabs with spaces
	-e						# detab input and entab output
	-f directivesFile		# read case of directives from directivesFile
	-m						# omit BLANKS ON and STRING ASIS from output
	-n						# don't add .a suffix to form output filename
	-p						# write progress information to diagnostics
	-pre[fix] string		# add prefix to input filename to form output name
	-suf[fix] string		# add suffix to input filename to form output name
	-t value				# output file tab setting
	-u c					# use character c to make macro names unique
-
Unalias [name…]
-
Unmount volume…
-
Unset [name…]
-
Volumes [-l] [volume…]	> volumeList
	-l						# long format (name, drive, size, free, files, etc.)
	-q						# don't quote volume names with special characters
-
Windows [-q]
	-q						# don't quote window names with special characters
-
