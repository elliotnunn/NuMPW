#
#	Macintosh Programmer's Workshop 3.1
#
#	Copyright Apple Computer, Inc. 1985-1989
#	All rights reserved.

Help Projector
Projector
	Projector is a collection of built–in MPW commands and windows that
	help programmers (both individuals and teams) control and account for
	changes to all the files (documentation, source, applications etc.)
	associated with a software project.
	
	Here is a brief summary of the commands (the CheckIn, CheckOut, and
	NewProject commands also have windows that can be opened using the
	“-w” option to the respective command):
	
	Help CheckIn			# check a file into a project
	Help CheckOut			# check a file out from a project
	Help CheckOutDir		# specify the directory where checked out files will placed
	Help DeleteNames		# delete user-defined symbolic names
	Help DeleteRevisions	# delete previous revisions of files in a project
	Help ModifyReadOnly	# enables a read-only Projector file to be edited
	Help MountProject		# mount projects
	Help NameRevisions	# define a symbolic name
	Help NewProject		# create a new project
	Help OrphanFiles		# remove Projector information from a list of files
	Help Project			# set or write the current project
	Help ProjectInfo		# display information about a Project
	Help TransferCkid		# move Projector information from one file to another
	Help UnmountProject	# unmount projects

#
#	Symbolic Debugger - SADE
#
#	
#	SADE is a symbolic, source-level debugger.  Objects in your program 
#  and in the Macintosh environment can be referenced by name and 
#  displayed according to their declared types.  Program execution
#  can be controlled with conditional breakpoints and stepping.  SADE
#  has a powerful command language which can be used to validate and
#  display program and system structures.

#
#	Graphical Interfaces - Commando
#
#	Each command in MPW 3.1 has a graphical interface for specifying
#	parameters and options.  To use this feature, enter the command
#	name and an ellipsis character (Option-semicolon).  Notice the
#	help text for each of the options.
#
#	For example, select and execute the Date command below.
#	(Triple click on the line and press the Enter key.)

Date…


#	Examples
#
#	To investigate the examples written in Assembly Language, C, Pascal,
#	or the Shell's script language, select and execute one of the following
#	commands.  (Triple click on the line and press the Enter key.)

Open "{MPW}"Examples:AExamples:Instructions		# Assembly Language
Open "{MPW}"Examples:CExamples:Instructions		# C
Open "{MPW}"Examples:PExamples:Instructions		# Pascal
Open "{MPW}"Examples:Examples:Instructions		# Shell Scripts


#	Help
#
#	Help summaries are available for each of the MPW commands.
#  To see the Help information, enter one of the commands below.
#	"Help Commands" produces a complete list of commands.  Brief
#	descriptions of Expressions, Patterns, Selections, Characters,
#	Shortcuts, Variables and Projector are also included.

	Help commandName	# information about commandName
	Help Commands		# a list of commands
	Help Expressions	# summary of expressions
	Help Patterns		# summary of patterns (regular expressions)
	Help Selections 	# summary of selections
	Help Characters 	# summary of MPW Shell special characters
	Help Shortcuts		# summary of MPW Shell shortcuts
	Help Variables		# summary of the standard MPW shell variables
	Help Projector		# summary of Projector, a project/source control system


#	Frequently Used Commands
#
#	A number of frequently used commands appear below.  The Mark menu
#	contains a marker for each command.  To locate and execute the
#	command, select it in the Mark menu, type any parameters or options,
#	and press the Enter key.
#
#	As you use these commands, add your favorite options, and other
#  frequently used commands.

Alias [name [word…]]		# Alias [name [word…]]  > aliasList
Catenate file…				# Catenate [file…]  < file  > catenation
Close window…				# Close [-y | -n | -c] [ -a | window…]
Count file…					# Count [-l] [-c] [file…]  < file > counts
Cut /RegExp/				# Cut [-c count] selection [window]
Date option					# Date ([-a | -s] [-d | -t] [-c seconds]) | [-n] > date
Delete file…				# Delete [-y | -n | -c] [-i] [-p] name…  ≥ progress
Duplicate name… target	# Duplicate [-y | -n | -c] [-p] [-d | -r] name… target  ≥ progress
Echo parameter…			# Echo [-n] [parameter…]  > parameters
Eject volume…				# Eject [-m] volume…
Equal name… target		# Equal [-d | -r] [-i] [-p] [-q] name… target  > differences ≥ progress
Evaluate expressions		# Evaluate [-h | -o | -b] [word…]  > value
Execute file				# Execute commandFile
Files file…					# Files [option…] [name…]  > fileList
Find /RegExp/				# Find [-c count] selection [window]
Line number					# Line n
NewFolder name…			# NewFolder name…
Open name…					# Open [-n | -r] [-t] [names…]
Parameters parameter…	# Parameters [parameter…]  > parameters
Print file…					# Print [option…] file…  < file ≥ progress
Replace /RegExp/ string # Replace [-c count] selection replacement [window]
Save window…				# Save [-a | window…]
Search RegExp file…		# Search [option…] pattern [file…]  < file > found
Set [name [value]]		# Set [name [value]]	 > variableList
Volumes volume…			# Volumes [-l] [-q] [volume…] > volumeList
Which name					# Which [-a] [-p] [name]  > file ≥ progress

-------------------------------------------------------------------------------
