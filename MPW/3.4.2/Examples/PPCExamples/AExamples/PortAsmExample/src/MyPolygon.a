;------------------------------------------------------------------------------
;
;	PortAsm Simple Example	By Steven Ellis
;
;	Copyright MicroAPL Ltd 1993/4
;
;	MyPolygon.a - Code for handling the drawing of the Polygons
;
;------------------------------------------------------------------------------
	CASE	OBJECT
	
	INCLUDE	'Traps.a'
	INCLUDE	'QuickEqu.a'
	INCLUDE	'PAExample.inc'		; all our macros and data templates	

;
;Mapping from internal values to screen color codes
;
ColorMap:	RECORD
		DC.L	WhiteColor		; white not used in menu....
		DC.L	RedColor
		DC.L	YellowColor
		DC.L	MagentaColor
		DC.L	GreenColor
		DC.L	CyanColor
		DC.L	BlueColor
		DC.L	BlackColor
		ENDR

;****************************************
; DRAW_POLY
;****************************************
; Draw a polygon.
;
;IN:	A4.L: list of points (as longs in virtual device coordinates)
;	D4.W: count of points

		SEG	'Main'			; case sensitive
draw_poly:	PROC
		IMPORT	G:APPGLOBALS
		
		MOVE.W	(A4)+,D0		; get first point
		MOVE.W	(A4)+,D1
		MULS	G.Width,D0		; convert to device coordinates
		DIVS	#VIRWIDTH,D0		
		MULS	G.Height,D1
		DIVS	#VIRHEIGHT,D1
		MOVE.W	D0,-(SP)		; X
		MOVE.W	D1,-(SP)		; y
		MOVE.L	(SP),-(SP)		; save first point so we can close polygon
		_MoveTo
		
; Now loop around the other points
draw_loop:
		SUBQ.W	#1,D4			; finished?
		BLE	draw_end
		MOVE.W	(A4)+,D0		; get next point
		MOVE.W	(A4)+,D1
		MULS	G.Width,D0		; convert to device coordinates
		DIVS	#VIRWIDTH,D0
		MULS	G.Height,D1
		DIVS	#VIRHEIGHT,D1
		MOVE.W	D0,-(SP)		; X
		MOVE.W	D1,-(SP)		; y
		_LineTo
		BRA.S	draw_loop

draw_end:
		_LineTo				; close polygon 
						; initial point is on stack
		RTS

		ENDP
	
;****************************************
;	FILL_POLYGON			*
;****************************************
; Fill a polygon in a specified colour.
;
;IN:	10(SP).W:  Colour number 0-7
;	 8(SP).W:   Number of points
;	 4(SP).L:   Pointer to array of points (in virtual device co-ordinates)
;	 0(SP).L:   Return address
; OUT:	None
;
; Note: Calling routine cleans up stack after us
;
fill_polygon:	PROC
		IMPORT	(PolyWindow,RealWindow):DATA
	
		; Set the port to ensure it is our window,
		; use SetGWorld to allow virtual windows
		MOVE.L	PolyWindow,-(SP)
		CLR.L	-(SP)
		_SetGWorld
	
		; Set the foreground colour
		MOVE.L	10(SP),D0		; Fetch our colour number 0 - 7
		LSL.L	#2,D0			; index long word
        	LEA	ColorMap,A0 		; -> table
		MOVE.L	0(A0,D0.W),-(SP)
		_ForeColor
	
		; Now set up the polygon
		MOVE.L	4(SP),A4		; -> to points list
		MOVE.W	8(SP),D4		; count of points

		CLR.L	-(SP)			; space for result
		_OpenPoly			; start a polygon
		MOVE.L	(SP)+,D5		; handle

		BSR	draw_poly		; draw the polygon outline

		_ClosePoly
	
		MOVE.L	D5,-(SP)
		_PaintPoly			; fill the polygon
		MOVE.L	D5,-(SP)
		_KillPoly			; free up storage allocated
						; for polygon
		MOVE.L	RealWindow,-(SP)
		CLR.L	-(SP)
		_SetGWorld
		RTS

		ENDP

;****************************************
;	OUTLINE_POLYGON			*
;****************************************
; Outline a polygon in a specified colour.
;
;IN:	10(SP).L:   Colour number 0-7
;	 8(SP).W:   Number of points
;	 4(SP).L:   Pointer to array of points (in virtual device co-ordinates)
;	 0(SP).L:   Return address
;OUT:	None; No returned parameters.
;
; Note: Calling routine cleans up stack after us
;
outline_polygon: PROC
		IMPORT	(PolyWindow,RealWindow):DATA
	
		; Set the port to ensure it is our window,
		; use SetGWorld to allow virtual windows
		MOVE.L	PolyWindow,-(SP)
		CLR.L	-(SP)
		_SetGWorld

		; Set the foreground colour
		MOVE.L	10(SP),D0		; Fetch our colour number 0 - 7
		LSL.L	#2,D0			; index long word
		LEA	ColorMap,A0 		; -> table
		MOVE.L	0(A0,D0.W),-(SP)
		_ForeColor
	
		; Nowdraw the polygon
		MOVE.L	4(SP),A4		; -> to points list
		MOVE.W	8(SP),D4		; count of points
		bsr	draw_poly		; draw the polygon outline
	
		MOVE.L	RealWindow,-(SP)
		CLR.L	-(SP)
		_SetGWorld
		RTS

		ENDP	

;****************************************
; DRAWONEPOLYGON			*
;****************************************
; void DrawOnePoly (Polygon *q, int color);
; Draw the given Polygon and outline it in black
; If not in About Dialog, refresh the correct part
; of the real screen.
;
;IN:	8(SP).L:  Color
;	4(SP).L:  Pointer to Polygon
;	0(SP).L:  Return Address
;
;Note:	Need to clean up calls to routines fill_polygon
;	and outline_polygon, hence local a6 variables.
;	As this routine is called from C, its operands
;	are removed on the return.
;
DrawOnePolygon	PROC	EXPORT

StackFrame	RECORD	{A6Link},DECR		; build a stack frame record
ParamBegin	EQU	*
PolyColor	DS.L	1			; Polygon color parameter
PolyPtr		DS.L	1			; Pointer to polygon
ParamSize	EQU	ParamBegin-*
RetAddr 	DS.L	1			; return address
SaveRegisters	DS.L	3
A6Link		DS.L	1			; place holder for A6 link
ColorNo		DS.L	1
NoPoints	DS.W	1			; Number of points
PtArray		DS.L	1			; Pointer to Array of points
LocalSize	EQU 	*			; size of the local variables
		ENDR
		
		DATA
		EXPORT	ThePolygon:DATA
ThePolygon	DS.L	1	

		CODE
		IMPORT	UpdateRealWin:CODE
		IMPORT	InAbout:DATA

		WITH	MyPoly
		WITH	StackFrame

		MOVEM.L	D4/D5/A4,-(SP)		;

		LINK	A6,#LocalSize		; allocate our local stack frame
		MOVE.L	PolyPtr(A6),A4		; pointer to polygon
		
		MOVE.L	PolyColor(A6),ColorNo(A6)  ; Colour for polygon fill
		MOVE.W	numPoints(A4),NoPoints(A6) ; Number of pairs of points
		LEA	pt(A4),A4
		MOVE.L	A4,PtArray(A6)		; Pointer to data
		BSR	fill_polygon		; Call the fill routine
	
		MOVE.L	#BlackItem,ColorNo(A6)	; Change colour to black
		BSR	outline_polygon		; Outline polygon in black
	
		TST.B	InAbout
		BNE	NoUpdate
		MOVE.L	PolyPtr(A6),D0		; pointer to the polygon
		BSR	UpdateRealWin
	
NoUpdate
		UNLK	A6			; destroy the link
		MOVEM.L	(SP)+,D4/D5/A4
		RTS				; no return value. 

		ENDP

;****************************************
; DOABOUTPOLYGONS			*
;****************************************
; Do the Polygons for the About box. See File AboutDlg.a
;
;USES:	MyPoly *CreateOnePolygon (int type, short points);
;	Boolean AnimateOnePolygon (MyPoly *p);
;

DoAboutPolygons	PROC	EXPORT
		DATA
		ENTRY	InAbout:DATA
InAbout		DC.B	0			; initialise the value
LocalPoly	DS.L	1

		CODE	
		IMPORT	AnimateOnePolygon:CODE
		IMPORT	CreateOnePolygon:CODE
		WITH	MyPoly
	
		MOVE.B	#1,InAbout		; Set Flag to indicate About Dialog
		MOVE.L	LocalPoly,D0
		BNE	GotPoly
		MOVE.L	#5,-(SP)		; number of points
		CLR.L	-(SP)			; type=star
		BSR	CreateOnePolygon
		MOVE.L	D0,A0
		MOVE.B	#1,RandColors(A0)
		MOVE.L	A0,LocalPoly
		LEA	8(SP),SP		; deallocate the stack
GotPoly:
		MOVE.L	#180,D3
@1		MOVE.L	LocalPoly,-(SP)
		JSR	AnimateOnePolygon	; Update and output the polygon		
		CLR.B	InAbout			; Reset Flag
		LEA	4(SP),SP		; deallocate the stack
		DBRA	D3,@1
	
		RTS
		ENDP

		END				; end of this source file

