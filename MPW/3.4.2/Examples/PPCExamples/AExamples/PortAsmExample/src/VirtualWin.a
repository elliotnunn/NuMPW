;------------------------------------------------------------------------------
;
;	PortAsm Simple Example
;
;	Copyright MicroAPL Ltd 1993/4
;
;	VirtualWin.a - Code for handling the virtual window used to draw
;		       the Polygons, and to update the real window.
;
;  9/12/93 STE	Initial Version
;		Uses two real windows, copying from one to the other
; 10/12/93 STE	Changed to use a proper virtual window. Had to modify use of
;		_SetPort to _SetGWorld to perform drawing and updates properly
; 20/12/93 STE	Rather than copying the whole of the virtual window on each
;		update, now only copy the region containing the polygon.
;
;------------------------------------------------------------------------------

	CASE	OBJECT
	
	INCLUDE	'Traps.a'
	INCLUDE	'QuickEqu.a'
	INCLUDE	'PAExample.inc'

;************************************************************
; INITVIRTUALWIN
;
; Initialise the virtual window for drawing the main polygons.
;
		SEG	'Main'
InitVirtualWin:	PROC	EXPORT
		DATA
	
		EXPORT	(PolyWindow,RealWindow,VirtualWindow):DATA		
		
PolyWindow: 	DS.L	1	; Polygon drawing Window pointer
RealWindow:	DS.L	1	; GraphPtr
VirtualWindow:	DS.L	1	; GWorldPtr
VirtRect:	DS.L	2	
		CODE
		
		IMPORT	G:APPGLOBALS
		
		CLR.L	VirtRect
		MOVE.L	G.WindowSize,VirtRect+4 ; set size of rectangle
		CLR.L	-(SP)			; space for result
		PEA	VirtualWindow
		CLR.W	-(SP)			; Use Screen pixel depth
		PEA	VirtRect		; Set Window Size from resource
		CLR.L	-(SP)			; Standard color table
		CLR.L	-(SP)			; ignore graphics device
		CLR.L	-(SP)			; flags
		_NewGWorld
		LEA	4(SP),SP		; remove result
		
		
		; Set for virtual window
		;
		MOVE.L	VirtualWindow,-(SP)
		CLR.L	-(SP)
		_SetGWorld
		
		; Lock the Pixels in memory and make them non-purgable
		; Saves having to re-load them each time we want to draw
		;
		CLR.B	-(SP)			; for result from LockPixels
		CLR.L	-(SP)
		MOVE.L	VirtualWindow,-(SP)
		_GetGWorldPixMap		; source pixmap handle
		_LockPixels			; lock the pixmap into memory
		MOVE.B	(SP)+,D0		; ignore result
		
		CLR.L	-(SP)
		MOVE.L	VirtualWindow,-(SP)
		_GetGWorldPixMap		; source pixmap handle
		_NoPurgePixels
		
		; Erase the virtual window, and set the window for drawing
		; polygons to it.
		MOVE.L	VirtualWindow,A0
		PEA	portRect(A0)
		_EraseRect
		
		MOVE.L	VirtualWindow,PolyWindow
		
		RTS
		
		ENDP


;************************************************************
; CLEARVIRTUALWIN
;
; Erase the contents of the virtual window
;
		SEG	'Main'
ClearVirtualWin: PROC	EXPORT
		
		MOVE.L	VirtualWindow,-(SP)	; Set the correct graphics port
		CLR.L	-(SP)
		_SetGWorld
		
		MOVE.L	VirtualWindow,A0
		PEA	portRect(A0)
		_EraseRect
		
		
		MOVE.L	RealWindow,-(SP)	; Reset the port
		CLR.L	-(SP)
		_SetGWorld
	
		RTS
		
		ENDP

;************************************************************
; UPDATEREALWIN
;
; Copy the contents of the virtual window to the real screen
; Only copy the area surrounding the polygon. Uses C routine
; GetVirtualPolyRect to find the polygons bounding rectangle
;
;IN:	D0: pointer to the polygon
;
;USES:	Rect	*GetVirtualPolyRect (MyPoly *p);
;
		SEG	'Main'
UpdateRealWin:	PROC	EXPORT
		DATA	
polyRect	DS.L	Rect

		CODE
		IMPORT	GetVirtualPolyRect:CODE
		IMPORT	G:APPGLOBALS		
		
		MOVE.L	VirtualWindow,A0	; source bitmap, don't use
		PEA	portBits(A0)		; GetGWorldPixMap as port
						; not set to virtual		
		MOVE.L	RealWindow,A0
		PEA	portBits(A0)		; destination bitmap

		MOVE.L	d0,-(SP)
		JSR	GetVirtualPolyRect
		LEA	4(SP),SP		; remove operands from stack
		MOVE.L	D0,A0			; move result
						; convert rectangle
		MOVE.W	Rect.left(A0),D0	; to device coordinates
		MULS	G.Width,D0
		DIVS	#VIRWIDTH,D0		
		MOVE.W	D0,Rect.left(A0)
		MOVE.W	Rect.top(A0),D1
		MULS	G.Height,D1
		DIVS	#VIRHEIGHT,D1
		MOVE.W	D1,Rect.top(A0)
		MOVE.W	Rect.right(A0),D0
		MOVE.W	Rect.bottom(A0),D1
		MULS	G.Width,D0
		DIVS	#VIRWIDTH,D0
		MULS	G.Height,D1
		DIVS	#VIRHEIGHT,D1
		MOVE.W	D0,Rect.right(A0)
		MOVE.W	D1,Rect.bottom(A0)
						; perform the update
		MOVE.L	A0,-(SP)		; src rect = dest rect
		MOVE.L	A0,-(SP)
		MOVE.W	#srcCopy,-(SP)
		CLR.L	-(SP)
		_CopyBits

		RTS

		ENDP

;************************************************************
; REFRESHREALWIN
;
; Copy the contents of the virtual window to the real screen.
;
;IN:	D0: pointer to the polygon
;
		SEG	'Main'
RefreshRealWin:	PROC	EXPORT
		DATA	
polyRect	DS.L	Rect

		CODE
		IMPORT	GetVirtualPolyRect:CODE
		IMPORT	G:APPGLOBALS		
		
		MOVE.L	VirtualWindow,A0	; source bitmap, don't use
		PEA	portBits(A0)		; GetGWorldPixMap as port
		LEA	portRect(A0),A1		; not set to virtual.

		MOVE.L	RealWindow,A0
		PEA	portBits(A0)		; destination bitmap

	 	MOVE.L	A1,-(SP)
		PEA	portRect(A0)
		MOVE.W	#srcCopy,-(SP)
		CLR.L	-(SP)
		_CopyBits

		RTS

		ENDP

		END
