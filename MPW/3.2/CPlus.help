MPW C++ 3.1 Help Summary

Help information is available for each of the C++ commands.

	To see help information, type
	
	Help -f {MPW}CPlus.Help <command>, e.g. 
	
	Help -f {MPW}Cplus.Help CPlus
	
	Or simply paste this information into your MPW.Help file
		
	Copyright Apple Computer, Inc. 1990
	All rights reserved.
-

CFront [option…] [file…] < file > intermediate output ≥ progress
	-a						# force ANSI-style intermediate C code (default)
	-a0						# force K&R-style (pre-ANSI) intermediate C code
	-a1						# force ANSI-style intermediate C code (default)
	-c						# intermediate code to standard output; no object file
	-d name                 # equivalent to: #define name 1
    -d name=string          # equivalent to: #define name string
	-dump filename			# save state of C++ compilation in filename
	-dumpc filename			# save state of C++ compilation in filename (compressed)
	-e                      # write preprocessor results to output
    -e2                     # implies '-e' above, and strips comments
    -elems881               # generate MC68881 code for transcendentals
	-f filename				# act as if input comes from named file when it actually is from stdin 
	-i directory            # search for includes in directory
	-l						# in C output generate #line nn directives as #nn
	-l0						# in C output generate no #line nn directives at all
	-load filename			# load saved C++ compilation state from filename
	-mark fcts|types|data	# create MPW markers for the specified items in file being compiler
	-mark all				# create MPW markers for all of the above
	-maxerrors <n>			# specify that CFront abort after reporting <n> errors (default 12)
	-mbg ch8				# v2.0 compatible macsbug symbols
	-mbg off				# no macsbug symbols in the code (link/unlk only if necessary)
	-mbg on|full			# full macsbug symbols
	-mbg <n>				# macsbug symbols to length <n> (<n> can be 0..255)
	-mc68020                # generate MC68020 code 
    -mc68881                # generate MC68881 code for arithmetic operations
	-mf						# use MultiFinder memory if there is not enough MPW memory
	-mtbl0					# suppress output of method tables for Object Pascal classes
	-mtbl1					# force output of method tables for Object Pascal classes
    -p                      # write progress information to diagnostic
    -s segment              # generate code in segment
	-sym off				# no SADE records
	-sym on|full			# full SADE records; can modify with [,nolines] [,notypes] [,novars]
    -u name                 # equivalent to: #undef name
	-vtbl0					# suppress output of virtual tables for ordinary classes
	-vtbl1					# force output of virtual tables for ordinary classes
    -w                      # suppress warnings
	-w1						# generate additional warnings from CFront
	-w2						# generate maximum warnings from CFront and the C compiler
    -y directory            # create temporary files in directory
	-z0						# force 'inline' functions to be non-inline
	-z3						# suppress name encoding of local vars and struct members (default)
	-z4						# encode names of local vars and struct members
	-z6						# force enums always to be int variables
	-z7						# relax requirement on static class member initialization
	
	Note: CFront does not generate object files.  To compile a C++ program, use the CPlus command.
-

CPlus [option…] [file…] < file > intermediate output ≥ progress
	-a						# force ANSI-style intermediate C code (default)
	-a0						# force K&R-style (pre-ANSI) intermediate C code
	-a1						# force ANSI-style intermediate C code (default)
	-b						# passed thru to C compiler (put string constants into code and generate PC-relative references)
	-b2 					# passed thru to C compiler (implies '-b' above, and allows string constants to be overlaid)
	-b3 					# passed thru to C compiler (overlaid string constants in code--but not PC-relative refs.)
	-c						# intermediate code to standard output; no object file
	-comp name options		# use a different C compiler in "name" and give it "options"
	-d name                 # equivalent to: #define name 1
    -d name=string          # equivalent to: #define name string
	-dump filename			# save state of C++ compilation in filename
	-dumpc filename			# save state of C++ compilation in filename (compressed)
	-e                      # write preprocessor results to output
    -e2                     # implies '-e' above, and strips comments
    -elems881               # generate MC68881 code for transcendentals
	-f filename				# act as if input comes from named file when it actually is from stdin 
	-i directory            # search for includes in directory
	-l						# in C output generate #line nn directives as #nn
	-l0						# in C output generate no #line nn directives at all
	-load filename			# load saved C++ compilation state from filename
    -m                      # passed to C compiler: generate 32-bit references for data
	-mark fcts|types|data	# create MPW markers for the specified items in file being compiled
	-mark all				# create MPW markers for all of the above
	-maxerrors <n>			# specify that CFront abort after reporting <n> errors (default 12)
	-mbg ch8				# v2.0 compatible macsbug symbols
	-mbg off				# no macsbug symbols in the code (link/unlk only if necessary)
	-mbg on|full			# full macsbug symbols
	-mbg <n>				# macsbug symbols to length <n> (<n> can be 0..255)
	-mc68020                # generate MC68020 code 
    -mc68881                # generate MC68881 code for arithmetic operations
	-mf						# use MultiFinder memory if there is not enough MPW memory
	-mtbl0					# suppress output of method tables for Object Pascal classes
	-mtbl1					# force output of method tables for Object Pascal classes
    -o objname              # generate code in file or directory objname
	-opt on|off				# passed to C compiler: turn optimization on (default) or off
    -p                      # write progress information to diagnostic
	-patch					# use AT&T's "patch" mechanism for static constructors (use with -comp)
    -s segment              # generate code in segment
	-sym off				# no SADE records
	-sym on|full			# full SADE records; can modify with [,nolines] [,notypes] [,novars]
    -t                      # passed to C compiler: write compilation time to diagnostic
	-trace on				# passed to C compiler: generate tracing code--calls to %_EP and %_BP
	-trace off				# passed to C compiler: generate no tracing code (default)
	-trace always			# passed to C compiler: always generate tracing code--calls to %_EP and %_BP
	-trace never			# passed to C compiler: never generate tracing code (default)
    -u name                 # equivalent to: #undef name
	-vtbl0					# suppress output of virtual tables for ordinary classes
	-vtbl1					# force output of virtual tables for ordinary classes
    -w                      # suppress warnings
	-w1						# generate additional warnings from CFront
	-w2						# generate maximum warnings from CFront and the C compiler
	-w3						# passed through to C compiler (supresses "unused" warnings)
	-x filename				# generate C code for a different processor, using size and alignment info in filename
    -y directory            # create temporary files in directory
	-z0						# force 'inline' functions to be non-inline
	-z3						# suppress name encoding of local vars and struct members (default)
	-z4						# encode names of local vars and struct members
	-z6						# force enums always to be int variables
	-z7						# relax requirement on static class member initialization
-

