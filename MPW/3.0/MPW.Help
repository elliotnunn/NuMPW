MPW 3.0 Help Summaries

	Help summaries are available for each of the MPW commands.	
	To see the list of commands enter "Help Commands". In addition, 
	brief descriptions of Expressions, Patterns, Selections, Characters,
	Shortcuts, Variables, and Projector are also included.

	To see Help summaries, Enter a command such as

	Help commandName	# information about commandName
	Help Commands		# a list of commands
	Help Expressions	# summary of expressions
	Help Patterns		# summary of patterns (regular expressions)
	Help Selections 	# summary of selections
	Help Characters 	# summary of MPW Shell special characters
	Help Shortcuts		# summary of MPW Shell shortcuts
	Help Variables		# summary of the standard MPW shell variables
	Help Projector		# summary of Projector, a project/source control system
	
	Copyright Apple Computer, Inc. 1986-1988
	All rights reserved.

-	
Commands

	AddMenu 		# add a menu item
	Adjust			# adjust lines
	Alert			# display an alert box
	Alias			# define or write command aliases
	Align			# align text to left margin
	Asm 			# MC68xxx Macro Assembler
	Backup			# folder file backup
	Beep			# generate tones
	Begin			# group commands
	Break			# break from For or Loop
	BuildCommands	# show build commands
	BuildMenu		# create the Build menu
	BuildProgram	# build the specified program
	C				# C compiler
	Canon			# canonical spelling tool
	Catenate		# concatenate files
	CFront			# C++ to C translator
	CheckIn			# check a file into a project
	CheckOut		# check a file out from a project
	CheckOutDir		# specify the directory where checked out files will placed
	Choose			# choose or list network file server volumes and printers
	Clear			# clear the selection
	Close			# close specified windows
	Commando		# present a dialog interface for commands
	Compare 		# compare text files
    CompareFiles	# compare text files and interactively view differences
    CompareRevisions# compare two revisions of a file in a project
	Confirm 		# display a confirmation dialog box
	Continue		# continue with next iteration of For or Loop
	Copy			# copy selection to Clipboard
	Count			# count lines and characters
	CPlus			# script to compile C++ source
	CreateMake		# create a simple makefile
	Cut 			# copy selection to Clipboard and delete it
	Date			# write the date and time
	Delete			# delete files and directories
	DeleteMenu		# delete user-defined menus and menu items
	DeleteNames		# delete user-defined symbolic names
	DeleteRevisions # delete previous revisions of files in a project
	DeRez			# resource decompiler
	Directory		# set or write the default directory
    DirectoryMenu	# create the Directory menu
	DoIt			# highlight and execute a series of shell commands
	DumpCode		# write formatted CODE resources
	DumpFile		# display contents of any file
	DumpObj 		# write formatted object file
	Duplicate		# duplicate files and directories
	Echo			# echo parameters
	Eject			# eject volumes
	Entab			# convert runs of spaces to tabs
	Equal			# compare files and directories
	Erase			# initialize volumes
	Evaluate		# evaluate an expression
	Execute 		# execute command file in the current scope
	Exists			# confirm the existence of a file or directory
	Exit			# exit from a command file
	Export			# make variables available to commands
	FileDiv 		# divide a file into several smaller files
	Files			# list files and directories
	Find			# find and select a text pattern
	Flush			# flush the tools that the Shell has cached
	For 			# repeat commands once per parameter
	Format			# set or display formatting options for a window
	GetErrorText	# display error messages based on message number
	GetFileName		# display a Standard File dialog box
	GetListItem		# display items for selection in a dialog box
	Help			# write summary information
	If				# conditional command execution
	Lib 			# combine object files into a library file
	Line			# find line in the target window
	Link			# link an application, tool, or resource
	Loop			# repeat commands until Break
	Make			# build up-to-date version of a program
	MakeErrorFile	# create error message textfile
	Mark			# assign a marker to a selection
	Markers			# list markers
	MatchIt			# semi-intelligent language sensitive bracket matcher
    MergeBranch		# merge a branch revision onto the trunk
	ModifyReadOnly	# enables a read-only Projector file to be edited
	Mount			# mount volumes
	MountProject	# mount projects
	Move			# move files and directories
	MoveWindow		# move window to h,v location
	NameRevisions 	# define a symbolic name
	New 			# open a new window
	Newer			# compare modification dates of files
	NewFolder		# create a new folder
	NewProject		# create a new project
	Open			# open file(s) in window(s)
	OrphanFiles		# remove Projector information from a list of files
	Parameters		# write parameters
	Pascal			# Pascal compiler
	PasMat			# Pascal programs formatter
	PasRef			# Pascal cross-referencer
	Paste			# replace selection with Clipboard contents
	PerformReport	# generate a performance report
	Position		# display current line position
	Print			# print text files
	ProcNames		# display Pascal procedure and function names
	Project			# set or write the current project
	ProjectInfo		# display information about a Project
	Quit			# quit MPW
	Quote			# echo parameters, quoting if needed
	Rename			# rename files and directories
	Replace 		# replace the selection
	Request 		# request text from a dialog box
	ResEqual		# compares the resources in two files
	Revert			# revert window to previous saved state
	Rez 			# resource compiler
	RezDet			# detect inconsistencies in resources
	RotateWindows	# send active (frontmost) window to back
	Save			# save specified windows
	Search			# search files for pattern
	Set 			# define or write Shell variables
	SetDirectory	# set the default directory
	SetFile 		# set file attributes
	SetPrivilege	# set access privileges for directories on file servers
	SetVersion		# maintain version and revision number
	Shift			# renumber command file positional parameters
	Shutdown		# power down or restart the machine
	SizeWindow		# set a window's size
	Sort			# sort or merge lines of text
	StackWindows	# arrange windows diagonally
	Target			# make a window the target window
	TileWindows		# arrange windows in a tiled fashion
	TransferCkid	# move Projector information from one file to another
	Translate		# translate characters
	Unalias 		# remove aliases
	Undo			# undo the last edit
	Unexport		# remove variable definitions from the export list
	Unmark			# remove a marker from a window
	Unmount 		# unmount volumes
	UnmountProject	# unmount projects
	Unset			# remove Shell variable definitions
	UserVariables	# uses Commando to set all the user variables
	Volumes 		# list mounted volumes
	WhereIs			# find the location of a file
	Which			# determine which file the shell will execute
	Windows 		# list windows
	ZoomWindow		# enlarge or reduce a window's size
-
Variables
	Variables defined by the MPW Shell:
	
	{Active}			full pathname of current active window
	{Aliases}			list of all defined aliases
	{Boot}				volume name of the boot disk
	{Command}			full pathname of the last command executed
	{MPW}				full pathname of the Macintosh Programmer's Workshop.
	{ShellDirectory}	full pathname of the directory that contains the MPW Shell
	{Status}			result of the last command executed (0 means successful)
	{SystemFolder}		full pathname of the system folder
	{Target}			full pathname of the target window
	{User}				the current user name (initialized to the “Chooser” name)
	{Windows}			list of current windows		
	{Worksheet}			full pathname of the Worksheet window
	
	Variables used by the MPW Shell:
	
	{Commando}			name of the commando tool
	{Commands}			list of directories to search for commands
	{DirectoryPath}		list of common directories to speed changing directories
	{Echo}				control the echoing of commands to diagnostic output
	{Exit}				control script termination based on {Status}
	{IgnoreCmdPeriod}	control use of cmd-. during critical sections
	{Test}				control execution of tools and applications
	{AutoIndent}		auto indent setting used for new windows
	{CaseSensitive}		control case sensitivity for searching
	{Font}				font used for new windows
	{FontSize}			font size used for new windows
	{NewWindowRect}		window rectangle used for new windows (top,left,bottom,right)
	{PrintOptions}		options used by the print menu commands
	{SearchBackward}	control direction of searching
	{SearchType}		control type of searching (literal/word/expression)
	{SearchWrap}		control wrap-around search
	{StackOptions}		options used by the Stack Windows menu command
	{Tab}				tab size used for new windows
	{TileOptions}		options used by the Tile Windows menu command
	{WordSet}			set of characters that constitue a word
	{ZoomWindowRect}	window rectangle used for a zoomed window (top,left,bottom,right)
	
	Variables automatically set before script execution:
	
	{0}					name of the currently executing script
	{1}, {2}, … {n}		first, second, and nth parameter to the script
	{#}					number of parameters
	{Parameters}		equivalent to {1} {2} … {n}
	{"Parameters"}		equivalent to "{1}" "{2}" … "{n}"
	
	Variables used for libraries and include files:
	
	{AIncludes}			directories to search for assemby-language include files		
	{CIncludes}			directories to search for C include files
	{CLibraries}		directory containing C library files
	{Libraries}			directory containing shared library files
	{PInterfaces}		directory containing Pascal interface files
	{PLibraries}		directory containing Pascal library files
	{RIncludes}			directory containing Rez include files

-
Characters

	The characters listed below have special meanings in the command language.


	Space			Space separates words.
	Tab 			Tab also separates words.

	Return			Return separates commands.
	;				Semicolon also separates commands.
	|				Pipe separates commands and pipes output to input.
	&&				And separates commands, executing second if first succeeds.
	||				Or separates commands, executing second if first fails.
	(…) 			Parenthesis group commands.
					Parenthesis also group characters in filename patterns.

	#				Comment begins comments.

	∂				Escape (Option-D) quotes the following character.
	'…' 			Single quote quotes all other characters.
	"…" 			Double quote quotes all characters except ∂, {, and `.
	/…/ 			Slash quotes all characters except ∂, {, and `.
	\…\ 			Backslash quotes all characters except ∂, {, and `.

	{…} 			Braces denote variable substitution.
	`…` 			Backquotes denote command substitution.

	?				Question mark matches any character in filename patterns.
	≈				Approximately (Option-X) matches any string in patterns.
	[…] 			Brackets enclose character sets in filename patterns.
	*				Star indicates zero or more repetitions in patterns.
	+				Plus indicates one or more repetitions in patterns.
	«…» 			European quotes (Option-\ and Option-Shift-\) enclose
					repeat counts.

	<				Less-than indicates an input file specification.
	>				Greater-than indicates an output file specification.
	>>				Indicates appending to an output file specification.
	≥				Greater-than-or-equal indicates a diagnostic specification.
	≥≥				Indicates appending to a diagnostic file specification.
	∑				Capital sigma (option-w) indicates both an output file and
					diagnostic output file specification.
	∑∑				Indicates appending to the output and diagnostic file
					specification.
	
	…				Elipsis (Option-;) signals the Shell to use Commando

-
Expressions

	Numbers may be expressed in decimal, hexadecimal, octal, or
	binary.  Any of the following formats may be used:
	
	[0-9]+			decimal number
	0x[0-9a-f]+		hexadecimal number
	$[0-9a-f]+		hexadecimal number
	0[0-7]+			octal number
	0b[01]+			binary number
	
	The operators listed below are used in expressions in the
	Evaluate, If, Else If, Break, Continue, and Exit commands. 

	Alternate spellings of several operators are provided.
	All of the operators are evaluated from left to right.
	Operators with the highest precedence are listed first,
	and operators in the same group have equal precedence.


	(…) 			expression grouping

	-				unary negation
	~				bitwise negation
	!	 NOT  ¬ 	logical NOT (¬ is Option-L)

	*				multiplication
	÷	 DIV		division (÷ is Option-/)
	%	 MOD		modulus division

	+				addition
	-				subtraction

	<<				shift left
	>>				shift right

	<				less than
	<=	 ≤			less than or equal to (≤ is Option-<)
	>				greater than
	>=	 ≥			greater than or equal to (≥ is Option->)

	==				equal
	!=	 <>   ≠ 	not equal (≠ is Option-=)
	=~				equal to a pattern
	!~				not equal to a pattern

	&				bitwise AND

	^				bitwise XOR

	|				bitwise OR

	&&	 AND		logical AND

	||	 OR 		logical OR

-
Selections - selections specify a selection or insertion point

	§						current selection (Option-6)
	n						line number n
	!n						line n lines after end of current selection
	¡n						line n lines before start of selection (Option-1)
	position				position (defined below)
	markerName				selection marked by markerName
	pattern 				pattern  (defined below)
	(selection) 			selection grouping
	selection:selection 	both selections and everything in between
	
position - positions specify an insertion point

	•						position before first character of file (Option-8)
	∞						position after last character of file (Option-5)
	∆selection				position before first character of selection (Option-J)
	selection∆				position after last character of selection (Option-J)
	selection!n 			position n characters after selection
	selection¡n 			position n characters before selection (Option-!)
	
pattern - patterns specify characters to be matched

	/entireRE/				regular expression - search forward
	\entireRE\				regular expression - search backward
	
	Help Patterns			# See "Help Patterns" for more information.
	
-
Patterns - Patterns specify characters to be matched

	/entireRE/				regular expression - search forward
	\entireRE\				regular expression - search backward
	
entireRE

	•RE 					regular expression at beginning of line (Option-8)
	RE∞ 					regular expression at end of line (Option-5)
	RE						regular expression
	
RE

	simpleExpr				simple regular expression - defined below
	(RE)®digit				tagged RE - refer to match as ®digit (Option-R)
	'string'				literal - no characters within '…' are special
	"string"				literal - only ∂, {, and ` are special within "…"
	RE1RE2					regular expression RE1 followed by RE2
	
simpleExpr
	
	(RE)					regular expression grouping
	charExpr				single character regular expression - defined below
	simpleExpr* 			simple expression zero or more times
	simpleExpr+ 			simple expression one of more times
	simpleExpr«n»			simple expression n times (Option-\, Option-Shift-\)
	simpleExpr«n,»			simple expression at least n times
	simpleExpr«n1,n2»		simple expression at least n1, at most n2 times
	
charExpr
	
	character				character (unless it has special meaning)
	∂character				character - defeats any special meaning (Option-D)
	?						any character except Return
	≈						zero or more characters, except Return (Option-X)
	[charList]				any character in the list
	[¬charList] 			any character not in the list (Option-L)
	
charList
	
	[						[ first in the list represents itself
	]						] first in the list represents itself
	-						- first in the list represents itself
	character				character
	charList character		list of characters
	character-character 	character range (e.g. A-Z)
	
-
ShortCuts
	The following is a list of MPW Shell shortcuts:
	
	Double click		select word
	Triple click		select line
	Double Clicking on any of the characters (,),[,],{,},',",/,\,` will select
		everything between the character and its mate.

	UpArrow				move selection point one line above current selection
	DownArrow			move selection point one line below current selection
	RightArrow			move selection point one character to the right
	LeftArrow			move selection point one character to the left
	
	CMD-Shift-UpArrow	move selection point to top of file
	CMD-Shift-DownArrow	move selection point to bottom of file
	CMD-DownArrow		move selection point down one screen size
	CMD-RightArrow		move selection point to right edge of current line
	CMD-UpArrow			move selection point up one screen size
	CMD-LeftArrow		move selection point to left edge of current line
	CMD-Backspace		delete from current selection to end of file
	
	Searching shortcuts
		CMD-Shift-G		reverse the direction of "Find Same"
		CMD-Shift-H		reverse the direction of "Find Selection"
		CMD-Shift-T		reverse the direction of "Replace Same"
		Holding down Shift while selecting OK will reverse the direction 
			of "Find" and "Find and Replace"
	
	Holding down Option while selecting "Tile Windows" or "Stack Windows"
		will include the worksheet in the tiling or stacking
	Holding down Option while pressing Return will disable auto-indent
		for that line.
	Holding down Option while pressing Enter will invoke Commando on that
		command line.
	
	In Dialogs without an Edittext item
		Y				Yes
		N				No
		CMD .			Cancel
		ESC				Cancel

-
Projector
	Projector is a collection of built–in MPW commands and windows that
	help programmers (both individuals and teams) control and account for
	changes to all the files (documentation, source, applications etc.)
	associated with a software project.
	
	Here is a brief summary of the commands (the CheckIn, CheckOut, and
	NewProject commands also have windows that can be opened using the
	“-w” option to the respective command):
	
	Help CheckIn			# check a file into a project
	Help CheckOut			# check a file out from a project
	Help CheckOutDir		# specify the directory where checked out files will placed
    Help CompareRevisions   # compare two revisions of a file in a project
	Help DeleteNames		# delete user-defined symbolic names
	Help DeleteRevisions	# delete previous revisions of files in a project
    Help MergeBranch        # merge a branch revision onto the trunk
	Help ModifyReadOnly		# enables a read-only Projector file to be edited
	Help MountProject		# mount projects
	Help NameRevisions		# define a symbolic name
	Help NewProject			# create a new project
	Help OrphanFiles		# remove Projector information from a list of files
	Help Project			# set or write the current project
	Help ProjectInfo		# display information about a Project
	Help TransferCkid		# move Projector information from one file to another
	Help UnmountProject		# unmount projects
-
AddMenu 		# add a menu item
AddMenu [menu [item [command…]]]  > menuList
	
	Note: Item can contain the following metacharacters ("<char>" means
	any character):
		/<char>		Assign the keyboard equivalent Command-<char>
		!<char>		Place <char> to the left of the menu item
		^n			Item has an icon, where n is the icon number
		(			Item is disabled
		<style		Item has a special style: "style" can be any of the following:
						B	Bold
						I	Italic
						U	Underline
						O	Outline
						S	Shadow
-
Adjust			# adjust lines
Adjust [-c count] [-l spaces] selection [window]
	-c count				# repeat the Adjust count times
	-l spaces				# shift lines by “spaces” spaces
-	
Alert			# display an alert box
Alert [-s] [message…] < file
	-s						# silent, don't beep when dialog is displayed
-	
Alias			# define or write command aliases
Alias [name [word…]]  > aliasList
-	
Align			# align text to left margin
Align [-c count] selection [window]
	-c count				# repeat the Align count times
-	
Asm 			# MC68xxx Macro Assembler
Asm [option…] [file…]  < file > listing ≥ progress
	-addrsize size			# set size of address display
	-blksize blocks 		# use blocks * 512 byte I/O buffers
	-case on				# distinguish between upper and lower case
	-case obj[ect]			# preserve case in object file
	-case off				# ignore case (default)
	-c[heck]				# syntax check only, don't create object file
	-d[efine] name			# equivalent to: name EQU 1
	-d[efine] name=value	# equivalent to: name EQU value
	-d[efine] &name 		# equivalent to: &name SET[AC] 1
	-d[efine] &name=value	# equivalent to: &name SET[AC] value
	-e[rrlog] file			# write errors and warnings to file
	-f						# suppress page ejects in listing
	-font name[,size]		# set listing font and size
	-h						# suppress page headers in listing
	-i directory,…			# search for includes in directory,…
	-l						# write full listing to output
	-lo	file				# listing output file or directory
	-o objname				# generate code in file or directory objname
	-pagesize l[,w] 		# set listing page length and width
	-print mode 			# equivalent to: PRINT mode
	-p						# write progress information to diagnostics
	-s						# write short listing to output
    -sym off                # no SADE records
    -sym on|full            # full SADE records; can modify with [,nolines] [,notypes] [,novars]
	-t						# write time and total lines to diagnostics
	-w						# suppress warnings
	-wb 					# suppress warnings on branch instructions
-	
Backup			# folder file backup
Backup [option…] -from folder -to folder [file…]  > commands ≥ progress
	-a						# copy all files in "from" not in "to"
	-alt					# alternate prompts for disk drives
	-c						# create "to" folders if they don't exist
	-check checkopt,…		# produce reports based on checkopt
							# checkopt=from		"from" not in "to"
							#          to		"to" not in "from"
							#          allfroms	"from" not in "to" even if none
							#          alltos	"to" not in "from" even if none
							#          folders	"from" folders not in "to"
							#          newer	"to"s newer than "from"s
	-co filename			# redirect -check reports to filename
	-compare [only][,'opts']# write compare commands for out-of-date files
	-d						# write delete commands for files in "to" not in "from"
	-do [only][,'command']	# write the command string specified by command…
	-e						# eject disk when done
	-from folder|drive		# specify source folder or drive (1 or 2)
	-l						# write directory listing of "from" files
	-level n				# restrict -a and -d to files beyond level n
	-m						# multi-disk -- more than one "from" or "to" disk
	-n						# show folder nesting by indenting commands 
	-p						# write progress information to diagnostics
	-r						# recursively process nested folders
	-revert					# revert "to" files to their "from" state
	-since date[,time]|fname# process only files since specified time
	-sync					# synchronize both source and destination folders
	-t type					# process only files of specified type
	-to folder|drive		# specify destination folder or drive (1 or 2)
	-y						# suppress duplicate -y option
-	
Beep			# generate tones
Beep [note [,duration [,level]]]…
	#	duration is given in sixtieths of a second (default is 15)
	#	sound level is given as a number from 0 to 255 (default is 128)
-	
Begin			# group commands
Begin
	command…
End
-	
Break			# break from For or Loop
Break [If expression]
-	
BuildCommands	# show build commands
BuildCommands program [option…] > commands
	option…					# Make command options
-
BuildMenu		# create the Build menu
BuildMenu
-
BuildProgram	# build the specified program
BuildProgram program [option…] > log
	option…					# Make command options
-
C				# C compiler
C [option…] [file]  < file > preprocessor ≥ progress
    -b                      # put string constants into code and generate PC-relative references
    -b2                     # implies '-b' above, and allows string constants to be overlaid
	-b3						# overlaid string constants in code (but not PC-relative refs.)
    -c                      # syntax check only, don't create object file
    -d name                 # equivalent to: #define name 1
    -d name=string          # equivalent to: #define name string
    -e                      # write preprocessor results to output
    -e2                     # implies '-e' above, and strips comments
    -elems881               # generate MC68881 code for transcendentals
    -i directory            # search for includes in directory
    -m                      # generate 32-bit references for data (less efficient code)
    -mbg ch8                # v2.0 compatible macsbug symbols
    -mbg off                # no macsbug symbols in the code (link/unlk only if necessary)
    -mbg on|full            # full macsbug symbols
    -mbg <n>                # macsbug symbols to length <n> (<n> can be 0..63)
    -mc68020                # generate MC68020 code 
    -mc68881                # generate MC68881 code for arithmetic operations
    -n                      # Turn pointer assignment incompatibilty errors into warnings
    -o objname              # generate code in file or directory objname
    -p                      # write progress information to diagnostic
    -r                      # warn on calling a function that has no definition
    -s segment              # generate code in segment
    -sym off                # no SADE records
    -sym on|full            # full SADE records; can modify with [,nolines] [,notypes] [,novars]
    -t                      # write compilation time to diagnostic
    -u name                 # equivalent to: #undef name
    -w                      # suppress warnings
	-w2						# emit even more warnings
    -y directory            # create temporary files in directory
-	
Canon			# canonical spelling tool
Canon [option…] dictionary [file…]	< file > new
	-s						# case sensitive replacement
	-a						# assembler identifiers (include $, %, @)
	-c chars				# consider only the first chars characters
-	
Catenate		# concatenate files
Catenate [file…]  < file > catenation
-	
CFront			# C++ to C translator
CFront						# C++ to C translator
							# Execute the following command to get Help Information for CFront
								Help -f CPlus.Help CFront
-
CheckIn			# check a file into a project
CheckIn -w | -close | ([options…] files…) > progress
	-a						# checkin all files in current directory
	-b						# check in files… as branches
	-c						# cancel if conflict occurs (avoids dialog)
	-cf file				# the comment is contained in file.
	-close					# close the Check In window
	-cs comment				# a description of changes made to the file
	-delete					# delete the file after checking it in
	-m						# check out the files for modification after checking in
	-n						# answer no to all dialogs (avoids dialogs)
	-new					# add a new file to the project
    -p                      # write progress information to standard output
	-project project		# name of project that contains the files
	-t task					# a short description of task accomplished
	-touch					# touch the mod date of file after checking in
	-u user					# name of current user
	-w						# open the Check In window
	-y						# answer yes to all dialogs (avoids dialogs)
-
CheckOut		# check a file out from a project
CheckOut -w | -close | ([options…] files…) > progress
	-a						# check out all the files in the current project
	-b						# checkout specified files on a new branch
	-c						# cancel if conflict occurs (avoids dialog)
	-cancel					# cancel the checkout of the files
	-cf file				# the comment is contained in files
	-close					# close the Check Out window
	-cs comment				# a short description of changes
	-d dir					# directory where the checked out files should go
	-m						# check out a modifiable copy of the file
	-n						# answer no to all dialogs (avoids dialogs)
	-newer					# checkout latest copy of all files in the project
	-noTouch				# don't touch the mod date of the checked out files
	-open					# open the files after checking out
    -p                      # write progress information to standard output
	-project project		# name of project that contains the files
	-r						# recursively checkout files
	-t task					# a short description of task accomplished
	-u user					# name of current user
	-update					# checkout latest copy of all files you already have
	-w						# open the Check Out window
	-y						# answer yes to all dialogs (avoids dialogs)
-
CheckOutDir		# specify the directory where checked out files will placed
CheckOutDir [-project project | -m] [-r] [-x | directory]
	-project project		# name of project to associate with the checkout directory
	-m						# list the checkout directories of all root projects
	-r						# recursively set or display the checkout directories
	-x						# reset the checkout directories to ":"
-	
Choose			# choose or list network file server volumes and printers
Choose [option…] [[zone]:server[:volume] …]
	-c						# output in the form of further "Choose" commands.
	-cp						# print driver name and type of current printer.
	-dr driverFileName		# name of printer driver file in system folder (e.g. "LaserWriter")
	-guest					# log-in to the file server as a guest.
	-list					# list entities (don't choose them).
	-p						# print version information.
	-pr						# choose printers (instead of file servers).
	-pw password			# specify server log-in password.
	-u username				# specify user name for server log-in.
	-v						# verbose (print names of volumes really mounted).
	-vp volumePassword		# specify volume password (to mount it).
	-type type				# specify type of entity to list or choose (or '≈').

	Names take the form		"zone:server:volume"

	The wildcard '≈' may be used in place of a zone, server, volume or
	type name.  A leading ':' (empty zone name) or '*:' indicates the
	current zone.  A name of the form "…server:" will mount all volumes
	on the server, unless a specific volume name is given.
-	
Clear			# clear the selection
Clear [-c count] selection [window]
	-c count				# repeat the Clear count times
-	
Close			# close specified windows
Close [-y | -n | -c] [ -a | window…]
	-y						# save modified windows before closing (avoids dialog)
	-n						# don't save any modified windows (avoids dialog)
	-c						# cancel if there is a modified window (avoids dialog)
	-a						# close all the windows
-	
Commando		# present a dialog interface for commands
Commando [command] [-modify]
    -modify                 # enable Commando’s built-in editor
-	
Compare 		# compare text files
Compare [option…] file1 [file2]  < file2 > differences ≥ progress
	-b						# treat several blanks or tabs as a single blank
	-c c1-c2[,c1-c2]		# compare only specified columns
	-d depth				# maximum stack depth
	-e context				# display specified number of context lines
	-g groupingFactor		# grouping factor (matching lines for resync)
	-h width				# write differences horizontally
	-l						# lower case (i.e. ignore case differences)
	-n						# don't write to output if files match
	-m						# suppress displays of mismatched lines
	-p						# write progress information to diagnostics
	-s						# use static grouping factor
	-t						# ignore trailing blanks
	-v						# suppress line numbers in vertical displays
	-x						# don't expand tabs
-	
CompareFiles    # compare text files and interactively view differences
CompareFiles [-9 | -13 | -b x y] oldFile newFile
	-9						# assume a screen size of 512 x 342
	-13						# assume a screen size of 640 x 480
	-b x y					# tile windows into the rectangle specified by x y
-	
CompareRevisions # compare two revisions of a file in a project
CompareRevisions file…
-	
Confirm 		# display a confirmation dialog box
Confirm [-t] [message…] < file
	-t						# three buttons (Yes, No, Cancel)
-	
Continue		# continue with next iteration of For or Loop
Continue [If expression]
-	
Copy			# copy selection to Clipboard
Copy [-c count] selection [window]
	-c count				# copy the nth selection, where n = count
-	
Count			# count lines and characters
Count [-l] [-c] [file…]  < file > counts
	-l						# write only line counts
	-c						# write only character counts
-	
CPlus			# script to compile C++ source
CPlus						# script to compile C++ source
							# Execute the following command to get Help Information for CPlus
								Help -f CPlus.Help CPlus
-
CreateMake		# create a simple makefile
CreateMake [ -Application [ -c creator ] | -Tool | -DA |
			-CR -m mainEntryPoint -rt resourceType 
			[ -t type ] [ -c creator ] ] [-sym on] program file…
	-Application            # create an Application (default)
	-c creator				# optional Creator for Application or Code Resource
    -Tool                   # create a Tool
    -DA                     # create a Desk Accessory
	-CR						# create a Code Resource
	-m mainEntryPoint		# required Main Entry Point for Code Resource
	-rt resourceType		# required Resource Type for Code Resource
	-t type					# optional File Type for Code Resource
	-sym on					# include SADE information in the object file
-
Cut 			# copy selection to Clipboard and delete it
Cut [-c count] selection [window]
	-c count				# cut the next count selections
-	
Date			# write the date and time
Date ([-a | -s] [-d | -t] [-c seconds]) | [-n] > date
    -a						# abbreviated date (e.g. Wed, Jun 18, 1986)
    -s						# short date (e.g. 6/18/86)
    -d						# write date only
    -t						# write time only
	-c seconds				# write date corresponding to seconds
	-n						# write seconds since January 1, 1904
-
Delete			# delete files and directories
Delete [-y | -n | -c] [-i] [-p] name…  ≥ progress
	-y						# delete directory contents (avoids dialog)
	-n						# don't delete directory contents (avoids dialog)
	-c						# cancel if a directory is to be deleted (avoids dialog)
	-i						# ignore errors (no diagnostics)
	-p						# write progress information to diagnostics
-	
DeleteMenu		# delete user-defined menus and menu items
DeleteMenu [menuName [itemName]]
-
DeleteNames		# delete user-defined symbolic names
DeleteNames [-u user] [-p project] [-public] [-r] [names… | -a]
    -u user                 # name of current user
    -project project        # name of project that contains the files
	-public					# delete public names
	-r						# delete names recursively
	-a						# delete all names
-
DeleteRevisions # delete previous revisions of files in a project
DeleteRevisions [-u user] [-project project] [-file] [-y] revision…
    -u user                 # name of current user
    -project project        # name of project that contains the files
    -file                   # deletes the file and all its revisions
    -y                      # delete the file/revision (avoids dialog)
-	
DeRez			# resource decompiler
DeRez [option…] resourceFile [file…]  > description ≥ progress
    -c[ompatible]           # generate output compatible with Rez 1.0
    -e[scape]               # don't escape chars < $20 or > $D8
    -d[efine] name[=value]  # equivalent to #define name [value]
    -i[nclude] pathname     # search this path when looking for #include files
    -m[axstringsize] n      # write strings n characters per line
    -only typeExpr          # process only resources of this type
    -p[rogress]             # write progress information to diagnostics
    -rd                     # suppress warnings for redeclared types
    -s[kip] typeExpr        # skip resources of this type
    -u[ndef] name           # equivalent to #undef name

    Note: A typeExpr may have one of these forms:
          type
        "'type'(id)"
        "'type'(id:id)"
        "'type'(∂"name∂")"
-	
Directory		# set or write the default directory
Directory [-q | directory]	> directory
	-q						# don't quote directories with special characters
-	
DirectoryMenu	# create the Directory menu
DirectoryMenu [directory…]
-
DoIt			# highlight and execute a series of shell commands
DoIt (CommandFile [-echo] [-dump]) | [-selection]
	-echo					# echo commands before execution
	-dump					# dump unexecuted commands after error
	-selection				# execute command in the current selection
-
DumpCode		# write formatted CODE resources
DumpCode [option…] resourceFile  > dump ≥ progress
    -d                      # don't dump object code
    -h                      # don't write headers (offsets, hex, etc.)
    -jt                     # don't dump jump table
    -n                      # dump only resource names
    -p                      # write progress information to diagnostics
    -r byte1[,byte2]        # dump code from address byte1 (through byte2)
    -rt type[=id]           # dump only resources with this type (and id)
    -s name                 # dump only resource with this name
-
DumpFile		# display contents of any file
DumpFile  [ option… ]  filename > dump ≥ progress
	-rf                     # display the resource fork of the file. (Default is data fork.)
	-bf						# display both forks of the file
	-a                      # suppress display of ASCII character values. 
	-h                      # suppress display of hexadecimal characters.
	-o                      # suppress display of file offsets.
	-w nn                   # width - display nn bytes on each line of output.
	-g nn                   # group nn bytes together without intervening spaces.
	-p                      # write progress information to diagnostic output.
	-r byte1[,byteN]        # display only the byte range from byte1 to byteN.
-	
DumpObj 		# write formatted object file
DumpObj [option…] objectFile  > dump ≥ progress
    -d                      # don't dump object code
    -h                      # don't write headers (offsets, hex, etc.)
    -i                      # use ids, rather than names, in dump
	-jn						# just use names, rather than ids, in dump
    -l                      # dump file locations of object records
    -m name                 # dump only module name
    -n                      # dump only the dictionary of names
    -p                      # write progress information to diagnostics
    -r byte1[,byte2]        # dump code from byte1 in file (through byte2)
	-sym [Off]				# disable symbolic output (default)
         [On | Full]		# enable symbolic output, can be followed by:
            [,NoLabels]     #	omit label information
            [,NoLines]      #	omit source line information
			[,NoTypes]      #	omit type information
			[,NoVars]       #	omit variable information
-	
Duplicate		# duplicate files and directories
Duplicate [-y | -n | -c] [-p] [-d | -r] name… target  ≥ progress
	-y						# overwrite target files (avoids dialog)
	-n						# don't overwrite target files (avoids dialog)
	-c						# cancel if conflict occurs (avoids dialog)
	-p						# write progress information to diagnostics
	-d						# duplicate data fork only
	-r						# duplicate resource fork only
-	
Echo			# echo parameters
Echo [-n] [parameter…]	> parameters
	-n						# don't write return following the parameters
-	
Eject			# eject volumes
Eject [-m] volume…
	-m						# leave the volume mounted
-	
Entab			# convert runs of spaces to tabs
Entab [option…] [file…]  < file > tabbed ≥ progress
	-a minValue				# Min run of blanks that can be replaced with a tab
	-d tabValue 			# input tab setting
	-l quote…				# left quotes that prevent EnTab (default '")
	-n						# no quote characters, EnTab everything
	-p						# write progress information to diagnostics
	-q quote…				# quotes that prevent EnTab (default '")
	-r quote…				# right quotes that prevent EnTab (default '")
	-t tabValue 			# output tab setting
-	
Equal			# compare files and directories
Equal [-d | -r] [-i] [-p] [-q] name… target  > differences ≥ progress
	-d						# compare data forks only
	-r						# compare resource forks only
	-i						# ignore files in target not in directory name
	-p						# write progress information to diagnostics
	-q						# quiet - don't write output, just set {Status}
-	
Erase			# initialize volumes
Erase [-y] [-s] volume…
	-y						# yes - erase the disk (avoids dialog)
	-s						# single-sided - 400K (default 800K)
-
Evaluate		# evaluate an expression
Evaluate [-h | -o | -b] [word…]  > value
Evaluate Name [binary operator]= [word…]
	-h						# display result in hexadecimal (leading 0x)
	-o						# display result in octal (leading 0)
	-b						# display result in binary (leading 0b)
-
Execute 		# execute command file in the current scope
Execute commandFile
-
Exists			# confirm the existence of a file or directory
Exists [-d | -f | -w] [-q] name…  > file
	-d						# check if name is a directory
	-f						# check if name is a file
	-w						# check if name is a file and writeable
	-q						# don't quote file names with special characters
-
Exit			# exit from a command file
Exit [status] [If expression]
-
Export			# make variables available to commands
Export [-r | -s | name…]  > exports
	-r						# generate Unexport commands for all exported variables
	-s						# print the names only
-
FileDiv 		# divide a file into several smaller files
FileDiv [option…] file [prefix]  ≥ progress
	-f						# split file at formfeed character
	-n splitPoint			# split file after splitPoint lines
	-p						# write progress information to diagnostics
-	
Files			# list files and directories
Files [option…] [name…]  > fileList
	-c creator				# list only files with this creator
	-d						# list only directories
	-f						# list full pathnames
	-i						# treat all arguments as files
	-l						# long format (type, creator, size, dates, etc.)
	-m columns				# n column format, where n = columns
	-n						# don't print header in long or extended format
	-o						# omit directory headers
	-q						# don't quote filenames with special characters
	-r						# recursively list subdirectories
	-s						# suppress the listing of directories
	-t type 				# list only files of this type
	-x format				# extended format with the fields specified by format
	
	Note: The following characters can specify the format
		a	Flag attributes
		b	Logical size, in bytes, of the data fork
		r	Logical size, in bytes, of the resource fork
		c	Creator of File ("Fldr" for folders)
		d	Creation date
		k	Physical size in kilobytes of both forks
		m	Modification date
		t	Type
		o	Owner (only for folders on a file server)
		g	Group (only for folders on a file server)
		p	Privileges (only for folders on a file server)
-	
Find			# find and select a text pattern
Find [-c count] selection [window]
	-c count				# find the nth selection, where n = count
-
Flush			# flush the tools that the Shell has cached
Flush
-
For 			# repeat commands once per parameter
For name In word…
	command…
End
-
Format			# set or display formatting options for a window
Format [[-f font] [-s fontsize] [-t tabsize] [-a attr]] | [-x fmt] [window…]
	-f fontName				# set font to fontName
	-s fontSize				# set the font size to fontSize
	-t tabSize				# set the tab size to tabSize
	-a attr					# set the auto indent and show invisibles flags
	-x fmt					# output the current format in the specified format
	
	Note: The following attributes may be used with the -a option:
		A	auto indentation on
		a	auto indentation off
		I	show invisibles on
		i	show invisibles off
	
	Note: The following characters may be used with the -x option:
		f	font name
		s	font size
		t	tab size
		a	attributes
-
GetErrorText	# display error messages based on message number
GetErrorText [-f filename] [-s filename] [-n] [-p] errnbr[,insert,…] …
GetErrorText -i idnbr,…
	# display error messages based on message number
	
	-f filename				# explicit error msg file
	-i 						# report meaning of system id termination codes
	-n						# suppress error numbers in displayed messages
	-p						# write SysErrs's version info to diagnostics
	-s filename				# explicit system error msg file (default SysErrs.Err)
-
GetFileName		# display a Standard File dialog box
GetFileName  [-q] [-c | [[-t TYPE]… | -p | -d] [-m message] [-b buttontitle] [pathname]]
    -b                      # specify the default button's title
    -c                      # write current standard file path to standard output
    -d                      # select a directory
    -m message              # specify a prompt
    -p                      # select a new filename (SFPutFile) 
    -q                      # suppress quoting of filenames
    -s                      # return 0 status even if cancel is clicked
    -t type                 # specify file type for SFGetFile dialog
-
GetListItem		# display items for selection in a dialog box
GetListItem [option…] [[item…] | < file]
    -c[ancel]               # return a status of 0 even when cancel is clicked
    -d[efault] item         # item is entered in list and comes up selected
    -m[essage] message      # display message in dialog above the list
    -q[uote]                # don't quote items in the output
    -r[ows] rows            # make the list with this many rows
    -s[ingle]               # only allow a single selection
    -w[idth] width          # make the list this many pixels wide
-	
Help			# write summary information
Help [-f helpfile] [command…]  > helpInformation
	-f helpfile 			# alternate helpfile (default MPW.Help)
-
If				# conditional command execution
If expression
	command…
[Else If expression
	command… ] …
[Else
	command… ]
End
-	
Lib 			# combine object files into a library file
Lib [option…] objectFile…  ≥ progress
    -d                      # suppress duplicate definition warnings
    -df deleteFile          # delete modules listed in file deleteFile
    -dm name[,name]…        # delete external modules and entry points
    -dn name[,name]…        # delete external names, making them local
    -o name                 # write object file name (default Lib.Out.o)
    -p                      # write progress information to diagnostics
    -sg newSeg=old[,old]…   # merge old segments into new segment
    -sn oldSeg=newSeg       # change segment name oldSeg to newSeg
	-sym [On | Full]		# keep symbolic information (default)
		 [Off]				# discard symbolic information, can be followed by:
			[,NoLabels]		#   discard label information
			[,NoLines]		#   discard source line information
			[,NoTypes]		#   discard type information
			[,NoVars]		#   discard variable information
	-ver N					# set OMF file version number to N
    -w                      # suppress warnings
-
Line			# find line in the target window
Line n
-
Link			# link an application, tool, or resource
Link [option…] objectFile…  > map ≥ progress
	-ac alignment			# align code modules to 'n' byte boundaries
	-ad alignment			# align data modules to 'n' byte boundaries
    -c creator              # set resourceFile creator (default ????)
    -d                      # suppress duplicate definition warnings
    -da                     # desk accessory - add NULL to segment names
	-f						# allow FORTRAN-style common data
    -l                      # write a location map to output
    -la                     # -l, include anonymous symbols in location map
    -lf                     # -l, include file and location of definitions
    -m mainEntry            # use mainEntry as main entry point
    -ma name=alias          # create an alias for module name
	-map					# generate "friendly" link map
	-mf						# use MultiFinder temporary memory if necessary
	-msg keyword[,…]		# message options
		[no]dup				#   (suppress) warnings about duplicate symbols
		[no]multiple		#   (suppress) multiple undefined symbol reports
		[no]warn			#   (suppress) warning messages
    -o resourceFile         # write resourceFile (default Link.Out)
	-opt keyword[,…]		# perform Object Pascal optimizations
		Off					#   don't optimize
		On					#   optimize
		Nobypass			#   optimize, but always dispatch
    -p                      # write progress information to diagnostics
    -ra [seg]=attr[,attr…]  # set segment resource attributes:
		$xx (or) nnn		#   a hex or decimal attribute you figure out
		resSysHeap			#	or a comma-seperated list of resource
		resPurgeable		#	 attributes by name
		resLocked			#	
		resProtected		#	
		resPreload			#	
		resChanged			#	(essentially ignored)
    -rn                     # don't include resource names in resourceFile
    -rt type=id             # set resource type and lowest id (default CODE=0)  
    -sg newSeg=old[,old]…   # merge old segments into new segment
    -sn oldSeg=newSeg       # change segment name oldSeg to newSeg
	-srt					# sort global data by "near" and "far" references
    -ss size                # maximum segment size (default 32760)
	-sym [Off]				# disable symbolic output (default)
         [On | Full]		# enable symbolic output, can be followed by:
            [,NoLabels]     #	omit label information
            [,NoLines]      #	omit source line information
			[,NoTypes]      #	omit type information
			[,NoVars]       #	omit variable information
    -t type                 # set resourceFile type (default APPL)
    -uf unrefFile           # write list of unreferenced modules to unrefFile
    -w                      # suppress warnings
    -x crossRefFile         # write cross reference to crossRefFile
-	
Loop			# repeat commands until Break
Loop
	command…
End
-	
Make			# build up-to-date version of a program
Make [option…] target…	> commands ≥ progress
	-d name[=value] 		# define variable name as value (overrides makefile)
	-e						# rebuild everything regardless of dates
	-f makefile 			# read dependencies from makefile (default MakeFile)
	-p						# write progress information to diagnostics
	-r						# write roots of dependency graph to output
	-s						# write structure of target dependencies to output
	-t						# touch dates of targets and prerequisites
	-u						# identify targets in makefile not reached in build
	-v						# write verbose explanations to diagnostics
	-w						# suppress warnings
-
MakeErrorFile	# create error message textfile
MakeErrorFile [option…] [file…]  < file > listing ≥ progress
	-l						# write listing to standard output
	-o file/dir				# output file or directory
	-p						# write progress information to diagnostics
-
Mark			# assign a marker to a selection
Mark [-y | -n] selection name [window]
	-y						# replace existing marker (avoids dialog)
	-n						# don't replace existing marker (avoids dialog)
-
Markers			# list markers
Markers [-q] [window]
	-q						# don't quote the marker names
-
MatchIt			# semi-intelligent language sensitive bracket matcher
MatchIt [-a[sm] | -p[ascal] | -c] [-h] [-l] [-n] [-v] [window]
	-a[sm]					# target language is Assembler
	-p[ascal]				# target language is Pascal
	-c						# target language is C
	-h						# highlight all characters enclosed by match
	-l						# highlight entire lines containing match
	-n						# generate error message if no match
	-v						# display MatchIt's version number
-
MergeBranch      # merge a branch revision onto the trunk
MergeBranch file…
-
ModifyReadOnly	# enables a read-only Projector file to be edited
ModifyReadOnly file
-
Mount			# mount volumes
Mount drive…
-
MountProject	# mount projects
MountProject ([-s] [-pp] [-q] [-r]) | [Project]
	-s						# print names only, not commands
	-pp						# list mounted projects using project paths
	-q						# don't quote names with special characters
	-r						# list projects recursively
-
Move			# move files and directories
Move [-y | -n | -c] [-p] name… target  ≥ progress
	-y						# overwrite target files (avoids dialog)
	-n						# don't overwrite target files (avoids dialog)
	-c						# cancel if conflict occurs (avoids dialog)
	-p						# write progress information to diagnostics
-
MoveWindow		# move window to h,v location
MoveWindow [h v] [-i] [window]
	h						# horizontal position of top left corner
	v						# vertical position of top left corner
	-i						# ignore positioning errors
-
NameRevisions 	# define a symbolic name
NameRevisions [-u User] [-project Project] [-public | -b] [-r]
		[[-only] | name [[-expand] [-s] | [-replace] [-dynamic] [names… | -a]]]
	-u user					# name of current user
	-project project		# name of project that contains the revisions
	-public					# create a public name
	-b						# print both public and private names
	-expand					# evaluate names to revision level before printing
	-only					# only print the names, not the associated revisions
	-replace				# completely overwrite the previous definition of name
	-dynamic				# evaluate names to revision level when using not defining
	-r						# recursively execute NameRevisions starting with current project
	-s						# print a single name per line
	-a						# all the files in the project
-
New 			# open a new window
New [name…]
-
Newer			# compare modification dates of files
Newer [-c] [-e] [-q] file… target > newer
	-c						# compare creation dates
	-e						# report names that have same (equal) mod date as target
	-q						# don't quote file names with special characters
-
NewFolder		# create a new folder
NewFolder name…
-
NewProject		# create a new project
NewProject -w | -close | ([-u user] [-cs comment | -cf file] project)
	-cf file				# the comment is contained in file.
	-close					# close the New Project window
	-cs comment				# a short description of the project
	-w						# open the New Project window
	-u user					# name of current user
-
Open			# open file(s) in window(s)
Open [-n | -r] [-t] [name…]
	-n						# open new file (default name Untitled)
	-r						# open file for read-only use
	-t						# open file as the target window
-
OrphanFiles		# remove Projector information from a list of files
OrphanFiles file…
-
Parameters		# write parameters
Parameters [parameter…]  > parameters
-
Pascal			# Pascal compiler
Pascal [option…] [file…]  < file ≥ progress
    -b                      # generate A5 references for procedure addresses
    -c                      # syntax check only, don't create object file
    -clean                  # erase all symbol table resources
    -d name=(TRUE|FALSE)    # set compile time variable name
    -e file                 # write errors to file
    -h                      # suppress error messages regarding unsafe handles
    -i directory,…          # search for includes in directory,…
    -m                      # allow greater than 32K globals by using 32 bit references
    -mbg ch8                # include v2.0 compatible MacsBug symbols
    -mbg full               # include full (untruncated) symbols for MacsBug
    -mbg off                # don't include symbols for MacsBug
    -mbg number             # include MacsBug symbols truncated to length number
    -mc68020                # generate MC68020 code 
    -mc68881                # generate MC68881 code for floating point operations
    -n                      # generate separate global data modules for better allocation
    -noload                 # don't use or create any symbol table resources
    -o objname              # generate code in file or directory objname
    -ov                     # generate code to test for overflow
    -p                      # write progress information to diagnostics
    -r                      # don't generate range checking code
    -rebuild                # rebuild all symbol table resources
    -sym off                # don't emit SADE object file information
    -sym on | full          # generate symbolic debugger object records
    -t                      # write compilation time to diagnostics
    -u                      # initialize all data to $7267 for debugging use
    -w                      # don't perform peephole optimization
    -y directory            # create temporary files in directory
-	
PasMat			# Pascal programs formatter
PasMat [option…] [input [output]]  < input > output ≥ progress
	-a						# set a-  disable CASE label bunching
	-b						# set b+  enable IF bunching
	-body					# set body+ to disable indenting procedure bodies
	-c						# set c+  suppress Return before BEGIN
	-d						# set d+  use {…} comment delimiters
	-e						# set e+  capitalize identifiers
	-entab					# replace multiple blanks with tabs
	-f						# set f-  disable formatting
	-g						# set g+  group assignment and call statements
	-h						# set h-  disable FOR, WHILE, WITH bunching
	-i directory,…			# search for includes in directory,…
	-in 					# set in+ process includes
	-k						# set k+  indent statements between BEGIN and END
	-l						# set l+  literally copy reserved words, identifiers
	-list file				# write listings to file
	-n						# set n+  group formal parameters
	-o width				# set output line width (default 80)
	-p						# write progress information to diagnostics
	-pattern -old-new-		# modify include names, changing old to new
	-q						# set q+  no special ELSE IF formatting
	-r						# set r+  upper case reserved words
	-rec					# set rec+ to indent field lists under defined id
	-s file 				# substitute identifiers based on pairs in file
	-t tab					# set output tab setting (default 2)
	-u						# rename identifiers to match first occurence
	-v						# set v+  put THEN on separate line
	-w						# set w+  upper case identifiers
	-x						# set x+  suppress space around operators
	-y						# set y+  suppress space around :=
	-z						# set z+  suppress space after commas
	-:						# set :+  align colons in VAR declarations
	-@						# set @+  multiple CASE tags on separate lines
	-∂# 					# set #+  smart grouping of assignments and calls
	-_						# set _+  delete _ from identifiers
-	
PasRef			# Pascal cross-referencer
PasRef [option…] [file…]  < file > crossReference ≥ progress
	-a						# process includes and units each time encountered
	-c						# process includes and units only once
	-d						# process each file separately
	-i directory,…			# search for includes in directory,…
	-l						# write identifiers in lower case
	-n						# don't process USES or includes
	-ni | -noi[ncludes] 	# don't process include files
	-nl | -nol[istings] 	# don't list the input
	-nolex					# don't write lexical information
	-nt | -not[otal]		# don't write total line count
	-nu | -nou[ses] 		# don't process USES declarations   
	-o						# source written using Object Pascal
	-p						# write progress information to diagnostics
	-s						# don't write include and USES filenames
	-t						# cross reference by total line number
	-u						# write identifiers in upper case
	-w width				# set output line width (default 110)
	-x width				# set maximum identifier width
-
Paste			# replace selection with Clipboard contents
Paste [-c count] selection [window]
	-c count				# repeat the Paste count times
-
PerformReport	# generate a performance report
PerformReport [option…]  > reportFile ≥ progress
	-a						# list all procedures, in segment order
							# (default: produce only partial list, sorted by %)
	-l linkDataFile			# read link map file (concatenated with ROM.list)
	-m measurementsFile		# read performance measurements file
							# (default: "Perform.Out")
	-n NN					# show the top NN procedures (default: 50)
	-p						# write progress information to diagnostics
-
Position		# display current line position
Position [-l | -c] [window…]
	-l						# only list the line number
	-c						# only list the character offsets
-
Print			# print text files
Print [option…] file…  < file ≥ progress
	-b						# print a border around the text
	-b2						# alternate form of border
	-bm n[.n]				# bottom margin in inches (default 0)
	-c[opies] n 			# print n copies
	-ff string				# treat "string" at beginning of line as a formfeed
	-f[ont] name			# print using specified font
	-from n 				# begin printing with page n
	-h						# print headers (time, file, page)
	-hf[ont] name			# print headers using specified font
	-hs[ize] n				# print headers using specified font size
	-l[ines] n				# print n lines per page
	-lm n[.n]				# left margin in inches (default .2778)
	-ls n[.n]				# line spacing (2 means double-space)
	-md						# use modification date of file for time in header
	-n						# print line numbers to left of text
	-nw [-]n				# width of line numbers, - indicates zero padding
	-p						# write progress information to diagnostics
	-page n 				# number pages beginning with n
	-ps filename			# include PostScript file as background for each page
	-r						# print pages in reverse order
	-rm n[.n]				# right margin in inches (default 0)
	-s[ize] n				# print using specified font size
	-t[abs] n				# consider tabs to be n spaces
	-title title			# include title in page headers
	-tm n[.n]				# top margin in inches (default 0)
	-to n					# stop printing after page n
	-q quality				# print quality (HIGH, STANDARD, DRAFT)
-
ProcNames		# display Pascal procedure and function names
ProcNames [option…] [file…]  < file ≥ progress
	-c						# process includes and units only once
	-d						# reset total line count to 1 on each new file
	-e						# suppress page eject between each procedure listing
	-f						# PasMat format compatibilty mode
	-i pathname,…			# search for includes or USES in directory,…
	-n						# suppress line number and level information
	-o						# source file is an Object Pascal program
	-p						# write progress information to diagnostics
	-u						# process USES declarations
-
Project			# set or write the current project
Project [-q | projectName]	> project
	-q						# don't quote projects with special characters
-
ProjectInfo		# display information about a Project
ProjectInfo [-project project] [-comments] [-latest] [-f] [-r] [-s] [-only | -m] 
			[-af author | -a author] [-df dates | -d dates] [-cf pattern | -c pattern] 
  			[-t pattern] [-n name] [-newer | -update] [file…]
	-a author				# only list revisions created by author
	-af author				# only list files created by author
	-c pattern				# only list revisions whose comment contains pattern
	-cf pattern				# only list files whose comment contains pattern
	-comments				# list comments along with the rest of the information
	-d dates				# only list revisions whose create date is within dates
	-df dates				# only list files whose mod date is within dates
	-f						# list file information
	-log					# print project log
	-m						# only list files/revisions that are checked out
    -newer                  # info on files that would be checked out using this option
	-only					# only list project information
	-project project		# name of project to get information on
	-r						# recursively list subprojects
	-latest					# only list info on the latest revision on the main trunk
	-s						# short listing, names and revision names only
	-t pattern				# only list revisions whose task contains pattern
	-n name					# only list revisions that have name
    -update                 # info on files that would be checked out using this option
	
	Note: pattern is either a literal string or /regular expression/.
	
	Note: "dates" may take the following forms:
		date				# on date
		<date				# before but not including date
		≤date				# before and including date
		>date				# after and not including date
		≥date				# after and including date
		date-date			# between and including dates
		
	Note:  A date is mm/dd/yy [[hh:mm[:ss]] [AM|PM]]
	
	Note: "name" may take the following forms:
		name				# in name
		<name				# before name
		≤name				# before and including name
		>name				# after name
		≥name				# after and including name
-	
Quit			# quit MPW
Quit [-y | -n | -c]
	-y						# save all modified windows (avoids dialog)
	-n						# do not save any modified windows (avoids dialog)
	-c						# cancel if a window needs to be saved (avoids dialog)
-
Quote			# echo parameters, quoting if needed
Quote [-n] [parameter…]	 > parameters
	-n						# don't write return following the parameters
-	
Rename			# rename files and directories
Rename [-y | -n | -c] oldName newName
	-y						# overwrite existing file (avoids dialog)
	-n						# don't overwrite existing file (avoids dialog)
    -c                      # cancel if conflict occurs (avoids dialog)
-	
Replace 		# replace the selection
Replace [-c count] selection replacement [window]
	-c count				# repeat the replace count times
-	
Request 		# request text from a dialog box
Request [-q] [-d default] [message…] < file
	-q						# don't set status if user selects cancel
	-d default				# set default response
-
ResEqual		# compares the resources in two files
ResEqual [-p] File1 File2
	-p	 					# write progress information to diagnostics
-
Revert			# revert window to previous saved state
Revert [-y] [window…]
	-y 						# revert to old version (without dialog)
-
Rez 			# resource compiler
Rez [option…] [file…]  < file ≥ progress
    -a[ppend]               # merge resource into output resource file
    -align word | longword  # align resource to word or longword boundries
    -c[reator] creator      # set output file creator
    -d[efine] name[=value]  # equivalent to: #define macro [value]
    -i[nclude] pathname     # path to search when looking for  #include files
    -m[odification]         # don't change the output file's modification date
    -o file                 # write output to file (default Rez.Out)
    -ov                     # ok to overwrite protected resources when appending
    -p                      # write progress information to diagnostics
    -rd                     # suppress warnings for redeclared types
    -ro                     # set the mapReadOnly flag in output
    -s[earch] pathname      # path to search when looking for INCLUDE resources
    -t[ype] type            # set output file type
    -u[ndef] name           # equivalent to: #undef name
-
RezDet			# detect inconsistencies in resources
RezDet [option…] file…	> dump
	-b[ig]					# read resources one at a time, not all at once
	-d[ump] 				# write -show information, plus headers, lists, etc.
	-l[ist] 				# write list of resources with minimum information
	-q[uiet]				# don't write any output, just set {Status}
	-r[awdump]				# write -dump information plus contents
	-s[how] 				# write information about each resource
	
	Note: Use at most one of -quiet, -list, -show, -dump, and -rawdump.
-
RotateWindows	# send active (frontmost) window to back
RotateWindows
-
Save			# save specified windows
Save [-a | window…]
	-a						# save the contents of all windows
-
Search			# search files for pattern
Search [-s | -i] [-r] [-q] [-f file] pattern [file…]  < file > found
	-s						# case sensitive search (overriding {CaseSensitive})
	-i						# case insensitive search (overriding {CaseSensitive})
	-r						# write non-matching line to standard output
	-q						# suppress file name and line number in output
	-f file					# lines not written to output are put in this file
-
Set 			# define or write Shell variables
Set [name [value]]	> variableList
-
SetDirectory	# set the default directory
SetDirectory directory
-
SetFile 		# set file attributes
SetFile [option…] file…
	-a attributes			# attributes (lowercase = 0, uppercase = 1)
	-c creator				# file creator
	-d date 				# creation date (mm/dd/yy [hh:mm[:ss] [AM | PM]])
	-l h,v					# ICON location (horizontal,vertical)
	-m date 				# modification date (mm/dd/yy [hh:mm[:ss] [AM | PM]])
	-t type 				# file type

	Note: Period (.) represents the current date and time.
	Note: The following attributes may be used with the -a option:
		L	Locked
		V	Invisible
		B	Bundle
		S	System
		I	Inited
		D	Desktop
		M	Shared (can run multiple times)
		A	Always switch launch (if possible)
		 
-
SetPrivilege	# set access privileges for directories on file servers
SetPrivilege [option…] directory…  > information
    -d privileges           # set privileges for seeing directories
    -f privileges           # set privileges for seeing files
    -g group                # make the directories belong to group
    -i                      # return information on directories
    -m privileges           # set privileges for making changes
    -o owner                # make owner the owner of directories
	-r						# operate (set or list) recursively

    Note: The following privilege characters may be used with
    the -d, -f, or -m options (Upper case enables the privilege,
    lower case disables it):
         O   Owner
         G   Group
         E   Everyone
-
SetVersion		# maintain version and revision number
SetVersion [option…] file  > output ≥ progress
	-b						# increment the bug fix component by 1
	-country name			# country code name
	-csource file			# update the #define Version string in C source
	-d						# display (updated) version numbers to standard output
	-fmt nƒ.mƒ				# format version numbers according to specification
	-i resid				# use specified resource id instead of 0
	-p						# write SetVersion's version info to diagnostic file
	-prefix prefix			# prefix version with specified prefix
	-[p]source file			# update the Version string constant in Pascal source
	-r						# increment the revision component by 1
	-rezsource file			# update the resource definition in Rez source
	-sb bugfix				# set the bug fix component to the specified value
	-sr revision			# set the revision component to the specified value
	-stage stage			# set release stage for a 'vers' resource
	-suffix suffix			# suffix the version with specified suffix
	-sv version				# set the version component to the specified value
	-sx nonrel				# set the non-release component to the specified value
	-sync 1 | 2				# synchronize 'vers',1 with 'vers',2 or vice versa
	-t type					# use specified resource type
	-v						# increment the version component by 1
	-verid identifier		# use C/Pascal source version id instead of "Version"
	-version fmtstring		# alternate way of specifying version component actions
	-x						# increment the non-release component by 1
-
Shift			# renumber command file positional parameters
Shift [number]
-
Shutdown		# power down or restart the machine
Shutdown [-y | -n | -c] [-r]
	-y						# save all modified windows (avoids dialog)
	-n						# do not save any modified windows (avoids dialog)
	-c						# cancel if a window needs to be saved (avoids dialog)
	-r						# restart the machine
-
SizeWindow		# set a window's size
SizeWindow  [h v] [window]
	h						# window width (horizontal)
	v						# window height (vertical)
-
Sort			# sort or merge lines of text
Sort [option…] [files…]
	-b						# skip leading blanks of each field
	-check					# check if input is sorted (exit code 5 if not).
	-d						# sort fields as decimal numbers
	-f field1,field2,…		# specify fields to sort on (see below)
	-fs string				# specify field separator characters
	-l						# convert to lowercase before comparison
	-merge					# merge pre-sorted input files
	-o file					# specify output file, allows sorting-in-place
	-p						# print version and progress information
	-quote					# handle fields with quotes
	-stdin					# place-holder for standard input (acts like a file)
	-r						# reverse order of comparison
	-t						# sort fields as text (default)
	-u						# convert to uppercase before comparison
	-unique					# write only unique output lines
	-x						# sort fields as hexadecimal numbers (leading '$'
							#	or '0x' is ignored)

	The comma-seperated field specifications (following -f) take the forms:
	
			[F][.C][-K][bdlrtux]
		or	[F][.C][+N][bdlrtux]

	'F' is a field number (0=whole line [default], 1=first word, 2=second word…).
	'C' is the starting column number (from 1), default=1.
	'K' is the ending column number >= C, default=infinite.
	'N' is the maximum number of characters in the field, default=infinite.
	Only one of '-K' or '+N' can be specified.
	
	The local modifier characters 'bdlrtux' have the same meaning on a
	per-field basis as -b, -d, -l, -r, -t, -u and -x (which take effect
	globally).
-
StackWindows	# arrange windows diagonally
StackWindows [-h num] [-v num] [-r top,left,bottom,right] [-i | windows…]
	-h num					# horizontal offset between windows
	-v num					# vertical offset between windows
	-r t,l,b,r				# rectangle in which to stack windows
	-i						# include the worksheet
	windows…				# list of windows to tile
-
Target			# make a window the target window
Target name
-
TileWindows		# arrange windows in a tiled fashion
TileWindows [-h | -v] [-r top,left,bottom,right] [-i | windows…]
	-h						# tile windows horizontally
	-v						# tile windows vertically
	-r t,l,b,r				# rectangle in which to tile windows
	-i						# include the worksheet
	windows…				# list of windows to tile
-
TransferCkid	# move Projector information from one file to another
TransferCkid sourceFile destinationFile 
-
Translate		# translate characters
Translate [-p] [-s] src [dst] < file > output ≥ progress
    -p                      # write progress information to diagnostics
    -s                      # set font, font size, and tab setting of output
-
Unalias 		# remove aliases
Unalias [name…]
-
Undo			# undo the last edit
Undo [window]
-
Unexport		# remove variable definitions from the export list
Unexport [-r | -s | name…]	> unexports
	-r						# generate Export commands for all unexported variables
	-s						# print the names only
-
Unmark			# remove a marker from a window
Unmark name… window
-
Unmount 		# unmount volumes
Unmount volume…
-
UnmountProject	# unmount projects
UnmountProject -a | Project…
	-a						# unmount all mounted projects
-
Unset			# remove Shell variable definitions
Unset [name…]
-
UserVariables	# uses Commando to set all the user variables
UserVariables
-
Volumes 		# list mounted volumes
Volumes [-l] [-q] [volume…]	> volumeList
	-l						# long format (name, drive, size, free, files, dirs)
	-q						# don't quote volume names with special characters
-
WhereIs			# find the location of a file
WhereIs [-c] [-d] [-v] [-s directory]… pattern
	-c						# completely match filepattern
	-d						# include directories
 	-v						# verbose output - put summary line at end
	-s directory			# starting directory/volume for search
-
Which			# determine which file the shell will execute
Which [-a] [-p] [name]  > file ≥ progress
	-a						# report all commands named "name"
	-p						# writes progress information to diagnostics
-
Windows 		# list windows
Windows [-q]
	-q						# don't quote window names with special characters
-
ZoomWindow		# enlarge or reduce a window's size
ZoomWindow [-b | -s] [window]
	-b						# zoom to full screen (big)
	-s						# zoom back to regular size (small)
