#	Macintosh Programmer's Workshop 2.0.2
#
#	Copyright Apple Computer, Inc. 1985-1987
#	All rights reserved.


#
#	Graphical Interfaces - Commando
#
#	Each command in MPW 2.0.2 has a graphical interface for specifying
#	parameters and options.  To use this feature, enter the command
#	name and an ellipsis character (Option-semicolon).  Notice the
#	help text for each of the options.
#
#	For example, select and execute the Date command below.
#	(Triple click on the line and press the Enter key.)

Date…


#	Examples
#
#	To investigate the examples written in Assembly Language, C, Pascal,
#	or the Shell's script language, select and execute one of the following
#	commands.  (Triple click on the line and press the Enter key.)

Open "{MPW}"AExamples:Instructions		# Assembly Language
Open "{MPW}"CExamples:Instructions		# C
Open "{MPW}"PExamples:Instructions		# Pascal
Open "{MPW}"Examples:Instructions		# Shell Scripts


#	Help
#
#	Help summaries are available for each of the MPW commands.
#  To see the Help information, enter one of the commands below.
#	"Help Commands" produces a complete list of commands.  Brief
#	descriptions of Expressions, Patterns, Selections, Characters,
#	and Shortcuts are also included.

Help commandName		# information about commandName
Help Commands			# a list of commands
Help Expressions		# summary of expressions
Help Patterns			# summary of patterns (regular expressions)
Help Selections		# summary of selections
Help Characters		# summary of MPW Shell special characters
Help Shortcuts			# summary of MPW Shell shortcuts


#	Frequently Used Commands
#
#	A number of frequently used commands appear below.  The Mark menu
#	contains a marker for each command.  To locate and execute the
#	command, select it in the Mark menu, type any parameters or options,
#	and press the Enter key.
#
#	As you use these commands, add your favorite options, and other
#  frequently used commands.

Alias [name [word…]]		# Alias [name [word…]]  > aliasList
Catenate file…				# Catenate [file…]  < file  > catenation
Clear /RegExp/				# Clear [-c count] selection [window]
Close window…				# Close [-a] [-y | -n] [window…]
Copy /RegExp/				# Copy [-c count] selection [window]
Count file…					# Count [-l] [-c] [file…]  < file > counts
Cut /RegExp/				# Cut [-c count] selection [window]
Date option					# Date [-a | -s] [-d | -t]  > date
Delete file…				# Delete [-y | -n | -c] [-i] [-p] name…  ≥ progress
Duplicate name… target	# Duplicate [-y | -n | -c] [-p] [-d | -r] name… target  ≥ progress
Echo parameter…			# Echo [-n] [parameter…]  > parameters
Eject volume…				# Eject [-m] volume…
Equal name… target		# Equal [-d | -r] [-i] [-p] [-q] name… target  > differences ≥ progress
Evaluate expressions		# Evaluate [word…]  > value
Execute file				# Execute commandFile
Files -t TEXT file…		# Files [option…] [name…]  > fileList
Find /RegExp/				# Find [-c count] selection [window]
Line number					# Line n
NewFolder name…			# NewFolder name…
Open name…					# Open [-n | -r] [-t] [names…]
Parameters parameters…	# Parameters [parameter…]  > parameters
Paste /RegExp/				# Paste [-c count] selection [window]
Print file…					# Print [option…] [file…]  < file ≥ progress
Replace /RegExp/ string # Replace [-c count] selection replacement [window]
Save window…				# Save [-a | window…]
Search RegExp file…		# Search [option…] pattern [file…]  < file > found
Set [name [value]]		# Set [name [value]]	 > variableList
Volumes volume…			# Volumes [-l] [volume…]	> volumeList
Which name					# Which [-a] [-p] [name]  > file ≥ progress

-------------------------------------------------------------------------------
