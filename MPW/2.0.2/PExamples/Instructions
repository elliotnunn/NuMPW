Instructions - The Pascal Examples

Copyright Apple Computer, Inc. 1987
All rights reserved.


About the Examples

	Five sample Pascal programs are included with MPW Pascal: an
	application, a tool, a desk accessory, a sample resource editor,
	and a program that demonstrates the use of performance tools:
	
		Sample		- the Inside Macintosh Sample application
		ResEqual		- an MPW tool
		Memory 		- a sample desk accessory
		ResXXXXEd	- a sample resource editor
		TestPerf		- a performance demonstration tool

	The source files for each of these examples are in the "PExamples:" 
	folder.  In addition, a makefile that contains the commands needed to
	build each of the examples is provided in the same folder.
	

Building the Examples

	You can easily build each of the sample programs using the Directory
	and Build menus.  (See Chapter 2 of the MPW Reference.)
	
	Set the default directory to "PExamples:"

		The simplest way to do this is to select from the Directory menu
		the menu item that ends in "PExamples:".  You can also set the
		default directory by using the Directory and SetDirectory commands.
		

	Build the program
	
		You can use any of the four Build items at the bottom of the Build
		menu to build the program you have selected.  Each of these menu
		items displays a dialog box that asks for the name of the program
		you want to build.  When this dialog box appears, type the name of
		one of the sample programs (Sample, ResEqual, Memory, ResXXXX, or
		TestPerf).
		
		Each of the Build menu items behaves slightly differently:
		
			Build…  -  The program is automatically built.  The commands
			used, and any error messages, are displayed in the Worksheet.
			Only files that have been changed since you last built the
			program are compiled, saving considerable time.
	
			Full Build…  -  The program is completely rebuilt, ignoring
			any object files or intermediate files that may already exist
			from a previous build.  The commands used, and any errors, are
			displayed in the Worksheet.
			
			Show Build Commands…  -  The commands needed to build the program
			are written to the Worksheet, but not executed.  You can then
			select any or all of the commands and execute them yourself.
			(To execute the commands select them and press Enter.)
			
			Show Full Build Commands…  -  The commands needed to completely
			rebuild the program are written to the Worksheet.  This is a
			convenient way to see all of the commands used in building
			the program you have selected.


   Note: For more information about building the sample programs, see
   Chapter 2 of the MPW Reference.



Sample - The Inside Macintosh Sample Application

   The Sample application is discussed in Inside Macintosh, Volume I.
	Its source is in files Sample.p and Sample.r.

   To execute Sample, simply select the line below and press Enter.

		Sample



ResEqual - A Sample MPW Tool

	ResEqual is a sample MPW tool that compares resource files. A
	version of ResEqual is included with MPW, and is documented in
	the MPW Reference.  The source for ResEqual is in the files
	ResEqual.p, Stubs.a, and ResEqual.r.

   To test ResEqual, execute the following lines.

	  # The following three lines copy ResEqual into Dummy and renumbers
	  # one of the resources.
	  Echo "include ∂"ResEqual∂" not 'cmdo';" ∂
	  		 "include ∂"ResEqual∂" 'cmdo' (355) as 'cmdo' (356);" ∂
			 | Rez -o Dummy -t MPST -c 'MPS '
	  ResEqual ResEqual Dummy

   ResEqual should report that each file contains a resource not found
	in the other file.


Memory - A Sample Desk Accessory


   Memory is a sample desk accessory written in Pascal.  It displays the
	memory available in the application and system heaps, and on the boot
	disk.

   The build process puts the desk accessory into a Font/DA Mover file.
   To install the Memory desk accessory, use the Font/DA Mover to copy
   resource Memory from the file Memory into the System file.  If the
   Font/DA Mover is in your Applications folder, the following command
   will run it from MPW:

		"Font/DA Mover" "{SystemFolder}"System Memory

   After quitting the Font/DA Mover and returning to the MPW Shell, select
   "Memory" from the Apple menu.



ResXXXX - A Sample Resource Editor


   MakeFile also contains the commands for building "ResXXXX", a 
	supplemental resource editor for ResEdit.  If ResEdit can be
	found in the Applications folder, the MakeFile instructions
	will install the ResXXXX editor directly into ResEdit.

   To use the ResXXXX editor, execute ResEdit by selecting its name
	and pressing Enter.
	
		ResEdit


TestPerf - An example of Using Performance Tools in Pascal

	TestPerf is an MPW tool that demonstrates the use of the performance
	measurement tools.  MakeFile contains the commands for building TestPerf.

	To execute TestPerf, select and execute the following command. (This
	test will run about 15 to 60 seconds, depending upon the machine, with
	only internal computations being performed):
	
		TestPerf

	TestPerf's raw performance data is written to the file Perform.out.
	In this sample use of the performance measurement tools, the ROM was
	measured.  So the ROM link map file needs to be combined with the program
	link map file.  Because there are three different ROM maps, select and
	execute the line that corresponds to the machine TestPerf was run on:
	
	# For Macintosh Plus:
		Catenate "{MPW}ROM Maps:MacPlusROM.map" >> TestPerf.map

	# For Macintosh SE:
		Catenate "{MPW}ROM Maps:MacSEROM.map" >> TestPerf.map

	# For Macintosh II:
		Catenate "{MPW}ROM Maps:MacIIROM.map" >> TestPerf.map

	PerformReport is an MPW Tool that combines the output of the performance
	tools with the link map file and produces a list of procedures, sorted by
	estimated percent of time spent in each procedure.  To run PerformReport
	execute the following command:

		PerformReport -l TestPerf.map -m Perform.Out > Report.Out

	The output of PerformReport is written to the file Report.Out.  To examine
	this output, execute the following command:
	
		Open Report.Out


Writing Your Own Programs

	After building (and perhaps modifying) the sample programs, you will
	undoubtedly want to write a program of your own.  Use the New… item in
	the File menu, to create the source files.  Remember that Pascal
	source filenames should end in .p.
	
	Create Build Commands…  -  The Create Build Commands… item in the 
	Build menu runs a script that creates a makefile containing the
	commands for building programs written in C, Assembly Language, Pascal, 
	and/or Rez.  Selecting Create Build Commands… displays a dialog box that 
	allows you to enter information about your program.  Type the program's
	name, select its source files by clicking the Files… button, and click
	one of the radio buttons to indicate your choice of an application, tool,
	or desk accessory.  
	
	Create Build Commands… puts the makefile for your program in the file
	<program>.make.  Now you can use the Build menu to build and rebuild
	your program, just as with the examples.
	
	Larger Programs  -  If you add source files as your program grows,
	use Create Build Commands… again to add the new source files to the build
	instructions.  If you out-grow the capabilities of the simple Create
	Build Commands… script (perhaps by using tools other than Asm, C, Pascal,
	Rez, and Link in your builds) you can modify the makefile yourself.
	
	Modifying the Directory and Build Menus  -  The Directory and Build
	menus are both implemented using scripts written in the MPW Shell
	command language.  This has the big advantage that you can modify
	or customize them to match the way you work.


