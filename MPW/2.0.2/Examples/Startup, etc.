Startup, etc. -  Startup, Suspend, Resume and Quit Examples


Copyright Apple Computer, Inc. 1987
All rights reserved.


This file contains a number of ideas for modifying the Startup,
Suspend, Resume, and Quit scripts.

Startup			-	executed when starting the MPW Shell
UserStartup		-	executed from Startup
Suspend			-  executed before running an application
Resume			-  executed on return from an application
Quit				-  executed before quitting the MPW Shell


Relocating the MPW Folder

	Normally MPW is installed in a folder called MPW on the boot disk.
	It's important for the MPW system to know the location of this folder,
	so that the tools, scripts, libraries, include files, etc. that make
	up MPW can be easily located.  You can change the name of the MPW
	folder, or move it to another disk or directory, after making a simple
	change in the Startup file.

	Variable {MPW}, defined in the Startup file, specifies the folder
	that contains the MPW system.  The following line in the Startup
	file specifies the default location, folder MPW on the boot disk:

		Set MPW "{Boot}MPW:"

	If you keep your MPW Shell in the MPW folder, rather than on the
	desktop, you can define MPW to be the directory containing the
	shell, as follows:

		Set MPW "{ShellDirectory}"

	This allows you to move and rename the MPW folder whenever you like;
	variable {MPW} will always be defined correctly. (Note that variable
	{ShellDirectory} is predefined by the shell, and contains the name
	of the directory in which the shell is located.)


Saving Window Contents

	When you run an application or quit, the shell displays "Save Changes"
	dialogs for each modified window, to ask if you want to save the
	changes.  These dialogs can be avoided by explicitly saving any or
	all of the windows in the Suspend and Quit scripts.

	Add either of these lines at the end of Suspend and Quit:

		Save "{Worksheet}"	# Save the worksheet (the default)
		Save -a					# Save all windows



Double-clickable Scripts

	Have you ever wished you could run a script by double-clicking it
	from the Finder?  Wish no more.  With a few changes to the Startup
	file and some simple naming conventions, double-clickable scripts
	become a reality.

	There are three possible meanings for running a script that was
	double-clicked:

		1.  Run the script instead of the Startup file.
		2.  Run the script instead of UserStartup.
		3.	 Run the script after Startup and UserStartup.

	Let's assume a different file name suffix for each of the three cases.

		1.  ≈.Startup1 is run instead of Startup.
		2.  ≈.Startup2 is run instead of UserStartup.
		3.  ≈.Startup3 is run after Startup and UserStartup.

	Add the following commands at the beginning of Startup to set the
	{Clicked} variable and handle the ≈.Startup1 case.  Notice that
	the double-clicked file, which becomes the active window, is
	closed and executed.

		#	If the user double clicked on a file named ≈.Startup1,
		#	execute the file instead of the rest of Startup.

					Set Clicked "{Active}"
					If "{Clicked}" =~ /≈.Startup1/
						Close "{Clicked}"
						Execute "{Clicked}"
						Exit
					End


	Replace the UserStartup command at the end of the Startup file with
	the following commands to handle ≈.Startup2 and ≈.Startup3 files.

		#	If the user double clicked on a file named ≈.Startup2,
		#	execute the file instead of UserStartup.

					If "{Clicked}" =~ /≈.Startup2/
						Close "{Clicked}"
						Execute "{Clicked}"
						Exit
					End

		#  Run the UserStartup file.

					Execute "{ShellDirectory}UserStartup"

		#	If the user double clicked on a file named ≈.Startup3,
		#	execute the file following Startup and UserStartup.

					If "{Clicked}" =~ /≈.Startup3/
						Close "{Clicked}"
						Execute "{Clicked}"
					End



State Saving

	The State script writes the current variable definitions, exports,
	aliases, and menu items, the default directory, and the list of open
	windows to standard output.  This state information is written in the
	form of commands that may be used later to restore the state.  The date
	is included in the first line of output.

	To see the State script, execute the following:

		Open "{MPW}"Examples:State

	Important:	In order to use the State script, you must move it to a
	directory in which the shell looks for commands.

		Duplicate "{MPW}"Examples:State "{MPW}"Scripts:

	To save the state information in a file, execute a command such as

		State > XYZ.Startup1

	The state can then be restored by executing the following:

		Unset
		Unexport
		Unalias
		DeleteMenu
		Close -a
		Execute XYZ.Startup1

	Moreover, the state can be restored after leaving the shell by
	double-clicking on the XYZ.Startup1 file.  (See the Double-clickable
	Scripts example above.)



Crashes in Applications

	When you crash in an application run from the MPW Shell (something
	that just might happen during debugging) you're forced to restart
	the shell, loosing your variables, aliases, open windows, etc.

	With a few changes to the Suspend and Resume scripts, and the double-
	clickable scripts changes above, you can double-click on the file
	written by Suspend to pick up where you left off after a crash in
	an application.

	Replace the Begin … End statement in Suspend with the following:

		State > "{ShellDirectory}"Suspend.Startup1

	Replace the Execute and Delete commands in Resume with the following:

		 Execute "{ShellDirectory}"Suspend.Startup1
		 Delete  "{ShellDirectory}"Suspend.Startup1

	These changes simply change the name of the file in which Suspend
	saves the state information, so that it ends with the .Startup1 suffix.
	This suffix indicates a double-clickable script that replaced Startup.
